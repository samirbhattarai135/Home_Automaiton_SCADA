{"version":3,"sources":["modbus-flex-write.js"],"names":["module","exports","RED","install","mbBasics","require","mbCore","nodes","registerType","config","internalDebugLog","createNode","this","name","showStatusActivities","showErrors","showWarnings","emptyMsgOnFail","keepMsgProperties","delayOnStart","startDelayTime","parseInt","node","bufferMessageList","modbusClient","delayOccured","Map","inputDelayTimer","setNodeStatusTo","registerForModbus","server","INPUT_TIMEOUT_MILLISECONDS","logMessage","serverInfo","initModbusClientEvents","resp","msg","errorProtocolMsg","send","buildMessage","payload","emit","getOriginalMessage","sendEmptyMsgOnFail","err","prepareMsg","message","JSON","parse","origMsg","fc","unitid","isValidModbusMsg","isValid","address","Number","isInteger","quantity","setMsgPayloadFromHTTPRequests","hasOwnProperty","Object","prototype","topic","messageId","value","call","verboseWarn","settings","warn","indexOf","buildNewMessageObject","resetInputDelayTimer","getObjectId","id","clearTimeout","initializeInputDelayTimer","on","client","isActive","isNotReadyForInput","isReadyForInput","isInactive","httpMsg","buildNewMessage","setTimeout","done","deregisterForModbus","origMsgInput","assign","newMsg","inputMsg","set","onModbusWriteDone","onModbusWriteError","actualServiceState","clear","setNodeDefaultStatus"],"mappings":"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","file":"../modbus-flex-write.js","sourcesContent":["/**\n Copyright (c) since the year 2016 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n\n/**\n * Modbus flexible Write node.\n * @module NodeRedModbusFlexWrite\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const mbCore = require('./core/modbus-core')\n  const internalDebugLog = require('debug')('contribModbus:flex:write')\n\n  function ModbusFlexWrite (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.showWarnings = config.showWarnings\n    this.emptyMsgOnFail = config.emptyMsgOnFail\n    this.keepMsgProperties = config.keepMsgProperties\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    this.delayOnStart = config.delayOnStart\n    this.startDelayTime = parseInt(config.startDelayTime) || 10\n\n    const node = this\n\n    node.bufferMessageList = new Map()\n    node.INPUT_TIMEOUT_MILLISECONDS = 1000\n    node.delayOccured = false\n    node.inputDelayTimer = null\n\n    mbBasics.setNodeStatusTo('waiting', node)\n\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n    modbusClient.registerForModbus(node)\n    mbBasics.initModbusClientEvents(node, modbusClient)\n\n    node.onModbusWriteDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo('writing done', node)\n      }\n\n      node.send(mbCore.buildMessage(node.bufferMessageList, msg.payload, resp, msg))\n      node.emit('modbusFlexWriteNodeDone')\n    }\n\n    node.errorProtocolMsg = function (err, msg) {\n      if (node.showErrors) {\n        mbBasics.logMsgError(node, err, msg)\n      }\n    }\n\n    node.onModbusWriteError = function (err, msg) {\n      node.internalDebugLog(err.message)\n      const origMsg = mbCore.getOriginalMessage(node.bufferMessageList, msg)\n      node.errorProtocolMsg(err, origMsg)\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\n      mbBasics.setModbusError(node, modbusClient, err, origMsg)\n      node.emit('modbusFlexWriteNodeError')\n    }\n\n    node.prepareMsg = function (msg) {\n      if (typeof msg.payload === 'string') {\n        msg.payload = JSON.parse(msg.payload)\n      }\n\n      msg.payload.fc = parseInt(msg.payload.fc)\n      msg.payload.unitid = parseInt(msg.payload.unitid)\n      msg.payload.address = parseInt(msg.payload.address)\n      msg.payload.quantity = parseInt(msg.payload.quantity)\n      return msg\n    }\n\n    node.isValidModbusMsg = function (msg) {\n      let isValid = true\n\n      if (!(Number.isInteger(msg.payload.fc) &&\n        (msg.payload.fc === 5 ||\n          msg.payload.fc === 6 ||\n          msg.payload.fc === 15 ||\n          msg.payload.fc === 16))) {\n        node.error('FC Not Valid', msg)\n        isValid &= false\n      }\n\n      if (isValid &&\n        !(Number.isInteger(msg.payload.address) &&\n          msg.payload.address >= 0 &&\n          msg.payload.address <= 65535)) {\n        node.error('Address Not Valid', msg)\n        isValid &= false\n      }\n\n      if (isValid &&\n        !(Number.isInteger(msg.payload.quantity) &&\n          msg.payload.quantity >= 1 &&\n          msg.payload.quantity <= 65535)) {\n        node.error('Quantity Not Valid', msg)\n        isValid &= false\n      }\n\n      return isValid\n    }\n\n    node.setMsgPayloadFromHTTPRequests = function (msg) {\n      /* HTTP requests for boolean and multiple data string [1,2,3,4,5] */\n      if (Object.prototype.hasOwnProperty.call(msg.payload, 'value') && typeof msg.payload.value === 'string') {\n        if (msg.payload.value === 'true' || msg.payload.value === 'false') {\n          msg.payload.value = (msg.payload.value === 'true')\n        } else {\n          if (msg.payload.value.indexOf(',') > -1) {\n            msg.payload.value = JSON.parse(msg.payload.value)\n          }\n        }\n      }\n      return msg\n    }\n\n    node.buildNewMessageObject = function (node, msg) {\n      const messageId = mbCore.getObjectId()\n      return {\n        topic: msg.topic || node.id,\n        messageId,\n        payload: {\n          value: (Object.prototype.hasOwnProperty.call(msg.payload, 'value')) ? msg.payload.value : msg.payload,\n          unitid: msg.payload.unitid,\n          fc: msg.payload.fc,\n          address: msg.payload.address,\n          quantity: msg.payload.quantity,\n          messageId\n        }\n      }\n    }\n    /* istanbul ignore next */\n    function verboseWarn (logMessage) {\n      if (RED.settings.verbose && node.showWarnings) {\n        // node.updateServerinfo()\n        node.warn('Flex-Write -> ' + logMessage + ' ' + node.serverInfo)\n      }\n    }\n\n    node.isReadyForInput = function () {\n      return (modbusClient.client && modbusClient.isActive() && node.delayOccured)\n    }\n\n    node.isNotReadyForInput = function () {\n      return !node.isReadyForInput()\n    }\n\n    node.resetInputDelayTimer = function () {\n      if (node.inputDelayTimer) {\n        /* istanbul ignore next */\n        verboseWarn('reset input delay timer node ' + node.id)\n        clearTimeout(node.inputDelayTimer)\n      }\n      node.inputDelayTimer = null\n      node.delayOccured = false\n    }\n\n    node.initializeInputDelayTimer = function () {\n      node.resetInputDelayTimer()\n      if (node.delayOnStart) {\n        /* istanbul ignore next */\n        verboseWarn('initialize input delay timer node ' + node.id)\n        node.inputDelayTimer = setTimeout(() => {\n          node.delayOccured = true\n        }, node.INPUT_TIMEOUT_MILLISECONDS * node.startDelayTime)\n      } else {\n        node.delayOccured = true\n      }\n    }\n\n    node.initializeInputDelayTimer()\n\n    node.on('input', function (msg) {\n      /* istanbul ignore next */\n      if (mbBasics.invalidPayloadIn(msg)) {\n        verboseWarn('Invalid message on input.')\n        return\n      }\n      /* istanbul ignore next */\n      if (node.isNotReadyForInput()) {\n        verboseWarn('Inject while node is not ready for input.')\n        return\n      }\n      /* istanbul ignore next */\n      if (modbusClient.isInactive()) {\n        verboseWarn('You sent an input to inactive client. Please use initial delay on start or send data more slowly.')\n        return false\n      }\n\n      const origMsgInput = Object.assign({}, msg)\n      try {\n        const inputMsg = node.prepareMsg(origMsgInput)\n        if (node.isValidModbusMsg(inputMsg)) {\n          const httpMsg = node.setMsgPayloadFromHTTPRequests(inputMsg)\n          const newMsg = node.buildNewMessageObject(node, httpMsg)\n          node.bufferMessageList.set(newMsg.messageId, mbBasics.buildNewMessage(node.keepMsgProperties, httpMsg, newMsg))\n          modbusClient.emit('writeModbus', newMsg, node.onModbusWriteDone, node.onModbusWriteError)\n        }\n      } catch (err) {\n        node.errorProtocolMsg(err, origMsgInput)\n        mbBasics.sendEmptyMsgOnFail(node, err, origMsgInput)\n      }\n\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\n      }\n    })\n\n    node.on('close', function (done) {\n      mbBasics.setNodeStatusTo('closed', node)\n      node.bufferMessageList.clear()\n      modbusClient.deregisterForModbus(node.id, done)\n    })\n\n    if (!node.showStatusActivities) {\n      mbBasics.setNodeDefaultStatus(node)\n    }\n  }\n\n  RED.nodes.registerType('modbus-flex-write', ModbusFlexWrite)\n}\n"]}