{"version":3,"sources":["modbus-read.js"],"names":["module","exports","RED","install","mbBasics","require","mbCore","nodes","registerType","internalDebugLog","createNode","this","name","config","topic","dataType","adr","quantity","rateUnit","delayOnStart","showStatusActivities","showErrors","startDelayTime","connection","useIOFile","ioFile","getNode","useIOForPayload","emptyMsgOnFail","verboseLogging","settings","node","logIOActivities","INPUT_TIMEOUT_MILLISECONDS","statusText","delayTimerReading","verbose","setNodeStatusWithTimeTo","timeoutOccurred","verboseWarn","logMessage","modbusClient","intervalTimerIdReading","id","server","statusValue","statusOptions","setNodeStatusProperties","modbusPollingRead","search","sendStatus","status","rate","get_timeUnit_name","error","fill","shape","newStatusText","text","onModbusConnect","onModbusInit","serialSendingAllowed","resetAllReadingTimer","initializeReadingTimer","onModbusRegister","onModbusActive","onModbusError","failureMsg","onModbusClose","onModbusBroken","reconnectOnTimeout","onModbusReadDone","sendMessage","data","errorProtocolMsg","onModbusReadError","message","reconnectTimeout","msg","resp","input","origMsg","values","responseBuffer","response","lastUpdatedAt","sendingNodeId","mbIOCore","internalDebug","nameValuesFromIOFile","filterValueNames","allValueNames","functionCodeModbusRead","payload","send","from","err","logMsgError","getObjectId","resetDelayTimerToRead","resetIntervalToRead","fc","clearInterval","messageId","startIntervalReading","clearTimeout","setTimeout","removeListener","on","done","setInterval","calc_rateByUnit","valueNames","removeNodeListenerFromModbusClient","onModbusQueue","deregisterForModbus","registerForModbus","httpAdmin","post","auth","needsPermission","req","res","params","_","toString"],"mappings":"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","file":"../modbus-read.js","sourcesContent":["/**\n Copyright (c) since the year 2016 Klaus Landsdorf (http://plus4nodered.com/)\n Copyright 2016 - Jason D. Harper, Argonne National Laboratory\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc.\n Copyright 2013, 2016 IBM Corp. (node-red)\n All rights reserved.\n node-red-contrib-modbus\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n\n/**\n * Modbus Read node.\n * @module NodeRedModbusRead\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const mbCore = require('./core/modbus-core')\n  const mbIOCore = require('./core/modbus-io-core')\n  const internalDebugLog = require('debug')('contribModbus:read')\n\n  function ModbusRead (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.topic = config.topic\n    this.unitid = config.unitid\n\n    this.dataType = config.dataType\n    this.adr = config.adr\n    this.quantity = config.quantity || 1\n\n    this.rate = config.rate\n    this.rateUnit = config.rateUnit\n\n    this.delayOnStart = config.delayOnStart\n    this.startDelayTime = parseInt(config.startDelayTime) || 10\n\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.showWarnings = config.showWarnings\n    this.connection = null\n\n    this.useIOFile = config.useIOFile\n    this.ioFile = RED.nodes.getNode(config.ioFile)\n    this.useIOForPayload = config.useIOForPayload\n    this.logIOActivities = config.logIOActivities\n\n    this.emptyMsgOnFail = config.emptyMsgOnFail\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    const node = this\n    let timeoutOccurred = false\n    node.INPUT_TIMEOUT_MILLISECONDS = 1000\n    node.statusText = 'waiting'\n    node.delayTimerReading = false\n    node.intervalTimerIdReading = false\n    setNodeStatusWithTimeTo(node.statusText)\n    /* istanbul ignore next */\n    function verboseWarn (logMessage) {\n      if (node.verboseLogging && node.showWarnings) {\n        node.warn('Read -> ' + logMessage + ' address: ' + node.adr)\n      }\n    }\n    /* istanbul ignore next */\n    verboseWarn('open node ' + node.id)\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n\n    node.onModbusInit = function () {\n      setNodeStatusWithTimeTo('initialized')\n    }\n\n    node.onModbusConnect = function () {\n      setNodeStatusWithTimeTo('connected')\n      node.resetAllReadingTimer()\n      node.initializeReadingTimer()\n    }\n\n    node.onModbusRegister = function () {\n      if (node.showStatusActivities) {\n        setNodeStatusWithTimeTo('registered')\n      }\n\n      if (modbusClient.serialSendingAllowed) {\n        node.resetAllReadingTimer()\n        node.initializeReadingTimer()\n        setNodeStatusWithTimeTo('connected')\n      }\n    }\n\n    node.onModbusActive = function () {\n      setNodeStatusWithTimeTo('active')\n    }\n\n    node.onModbusQueue = function () {\n      setNodeStatusWithTimeTo('queue')\n    }\n\n    node.onModbusError = function (failureMsg) {\n      setNodeStatusWithTimeTo('failure')\n      if (modbusClient.reconnectOnTimeout) {\n        node.resetAllReadingTimer()\n      }\n\n      if (node.showErrors) {\n        node.warn(failureMsg)\n      }\n    }\n\n    node.onModbusClose = function () {\n      setNodeStatusWithTimeTo('closed')\n      node.resetAllReadingTimer()\n    }\n\n    node.onModbusBroken = function () {\n      setNodeStatusWithTimeTo('broken')\n      if (modbusClient.reconnectOnTimeout) {\n        setNodeStatusWithTimeTo('reconnecting after ' + modbusClient.reconnectTimeout + ' msec.')\n        node.resetAllReadingTimer()\n      }\n    }\n\n    node.onModbusReadDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        setNodeStatusWithTimeTo('reading done')\n      }\n      sendMessage(resp.data, resp, msg)\n    }\n\n    node.errorProtocolMsg = function (err, msg) {\n      if (node.showErrors) {\n        mbBasics.logMsgError(node, err, msg)\n      }\n    }\n\n    node.onModbusReadError = function (err, msg) {\n      node.internalDebugLog(err.message)\n      node.errorProtocolMsg(err, msg)\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\n      mbBasics.setModbusError(node, modbusClient, err, msg)\n    }\n\n    node.modbusPollingRead = function () {\n      if (!modbusClient.client) {\n        setNodeStatusWithTimeTo('waiting')\n        return\n      }\n\n      const msg = {\n        topic: node.topic || 'polling',\n        from: node.name,\n        payload: {\n          unitid: node.unitid,\n          fc: mbCore.functionCodeModbusRead(node.dataType),\n          address: node.adr,\n          quantity: node.quantity,\n          messageId: mbCore.getObjectId()\n        }\n      }\n\n      if (node.showStatusActivities) {\n        setNodeStatusWithTimeTo('polling')\n      }\n\n      modbusClient.emit('readModbus', msg, node.onModbusReadDone, node.onModbusReadError)\n    }\n\n    node.resetDelayTimerToRead = function (node) {\n      if (node.delayTimerReading) {\n        /* istanbul ignore next */\n        verboseWarn('resetDelayTimerToRead node ' + node.id)\n        clearTimeout(node.delayTimerReading)\n      }\n      node.delayTimerReading = null\n    }\n\n    node.resetIntervalToRead = function (node) {\n      if (node.intervalTimerIdReading) {\n        /* istanbul ignore next */\n        verboseWarn('resetIntervalToRead node ' + node.id)\n        clearInterval(node.intervalTimerIdReading)\n      }\n      node.intervalTimerIdReading = null\n    }\n\n    node.resetAllReadingTimer = function () {\n      node.resetDelayTimerToRead(node)\n      node.resetIntervalToRead(node)\n    }\n\n    node.resetAllReadingTimer()\n\n    node.startIntervalReading = function () {\n      if (!node.intervalTimerIdReading) {\n        /* istanbul ignore next */\n        verboseWarn('startIntervalReading node ' + node.id)\n        node.intervalTimerIdReading = setInterval(node.modbusPollingRead, mbBasics.calc_rateByUnit(node.rate, node.rateUnit))\n      }\n    }\n\n    node.initializeReadingTimer = function () {\n      node.resetAllReadingTimer()\n      if (node.delayOnStart) {\n        /* istanbul ignore next */\n        verboseWarn('initializeReadingTimer delay timer node ' + node.id)\n        node.delayTimerReading = setTimeout(node.startIntervalReading, node.INPUT_TIMEOUT_MILLISECONDS * node.startDelayTime)\n      } else {\n        node.startIntervalReading()\n      }\n    }\n\n    node.removeNodeListenerFromModbusClient = function () {\n      modbusClient.removeListener('mbinit', node.onModbusInit)\n      modbusClient.removeListener('mbqueue', node.onModbusQueue)\n      modbusClient.removeListener('mbconnected', node.onModbusConnect)\n      modbusClient.removeListener('mbactive', node.onModbusActive)\n      modbusClient.removeListener('mberror', node.onModbusError)\n      modbusClient.removeListener('mbclosed', node.onModbusClose)\n      modbusClient.removeListener('mbbroken', node.onModbusBroken)\n      modbusClient.removeListener('mbregister', node.onModbusRegister)\n      modbusClient.removeListener('mbderegister', node.onModbusClose)\n    }\n\n    this.on('close', function (done) {\n      node.resetAllReadingTimer()\n      node.removeNodeListenerFromModbusClient()\n      setNodeStatusWithTimeTo('closed')\n      /* istanbul ignore next */\n      verboseWarn('close node ' + node.id)\n      modbusClient.deregisterForModbus(node.id, done)\n    })\n\n    function sendMessage (values, response, msg) {\n      const topic = msg.topic || node.topic\n      if (node.useIOFile && node.ioFile.lastUpdatedAt) {\n        if (node.logIOActivities) {\n          mbIOCore.internalDebug('node.adr:' + node.adr + ' node.quantity:' + node.quantity)\n        }\n\n        const allValueNames = mbIOCore.nameValuesFromIOFile(node, msg, values, response, node.adr)\n        const valueNames = mbIOCore.filterValueNames(node, allValueNames, mbCore.functionCodeModbusRead(node.dataType), node.adr, node.quantity)\n\n        const origMsg = {\n          topic,\n          responseBuffer: response,\n          input: msg,\n          sendingNodeId: node.id\n        }\n\n        if (node.useIOForPayload) {\n          origMsg.payload = valueNames\n          origMsg.values = values\n        } else {\n          origMsg.payload = values\n          origMsg.valueNames = valueNames\n        }\n\n        node.send([\n          origMsg,\n          {\n            topic,\n            payload: response,\n            values,\n            input: msg,\n            valueNames,\n            sendingNodeId: node.id\n          }])\n      } else {\n        node.send([\n          {\n            topic,\n            payload: values,\n            responseBuffer: response,\n            input: msg,\n            sendingNodeId: node.id\n          },\n          {\n            topic,\n            payload: response,\n            values,\n            input: msg,\n            sendingNodeId: node.id\n          }\n        ])\n      }\n    }\n\n    function setNodeStatusWithTimeTo (statusValue) {\n      if (statusValue === 'polling' && timeoutOccurred) {\n        return\n      }\n\n      const statusOptions = mbBasics.setNodeStatusProperties(statusValue, node.showStatusActivities)\n      const statusText = node.statusText\n\n      if (statusValue.search('active') !== -1 || statusValue === 'polling') {\n        const newStatusText = statusOptions.status + getTimeInfo()\n        timeoutOccurred = false\n        if (newStatusText !== statusText) {\n          node.status({\n            fill: statusOptions.fill,\n            shape: statusOptions.shape,\n            text: newStatusText\n          })\n        }\n      } else {\n        const newStatusText = statusOptions.status\n        if (newStatusText !== statusText) {\n          node.status({\n            fill: statusOptions.fill,\n            shape: statusOptions.shape,\n            text: newStatusText\n          })\n        }\n      }\n    }\n\n    function getTimeInfo () {\n      return ' ( ' + node.rate + ' ' + mbBasics.get_timeUnit_name(node.rateUnit) + ' ) '\n    }\n\n    if (node.showStatusActivities) {\n      modbusClient.on('mbinit', node.onModbusInit)\n      modbusClient.on('mbqueue', node.onModbusQueue)\n    }\n\n    modbusClient.on('mbconnected', node.onModbusConnect)\n    modbusClient.on('mbactive', node.onModbusActive)\n    modbusClient.on('mberror', node.onModbusError)\n    modbusClient.on('mbclosed', node.onModbusClose)\n    modbusClient.on('mbbroken', node.onModbusBroken)\n    modbusClient.on('mbregister', node.onModbusRegister)\n    modbusClient.on('mbderegister', node.onModbusClose)\n\n    modbusClient.registerForModbus(node)\n  }\n\n  RED.nodes.registerType('modbus-read', ModbusRead)\n\n  RED.httpAdmin.post('/modbus/read/inject/:id', RED.auth.needsPermission('modbus.inject.write'), function (req, res) {\n    const node = RED.nodes.getNode(req.params.id)\n\n    if (node) {\n      try {\n        node.modbusPollingRead()\n        res.sendStatus(200)\n      } catch (err) {\n        res.sendStatus(500)\n        node.error(RED._('modbusinject.failed', { error: err.toString() }))\n      }\n    } else {\n      res.sendStatus(404)\n    }\n  })\n}\n"]}