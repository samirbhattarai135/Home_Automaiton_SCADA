{"version":3,"sources":["modbus-getter.js"],"names":["module","exports","RED","install","mbBasics","require","mbCore","nodes","registerType","config","internalDebugLog","createNode","this","name","dataType","adr","quantity","showErrors","showStatusActivities","showWarnings","msgThruput","connection","useIOFile","useIOForPayload","logIOActivities","emptyMsgOnFail","keepMsgProperties","verboseLogging","settings","delayOnStart","startDelayTime","parseInt","node","verbose","INPUT_TIMEOUT_MILLISECONDS","delayOccured","setNodeStatusTo","modbusClient","getNode","inputDelayTimer","initModbusClientEvents","server","resetInputDelayTimer","warn","logMessage","registerForModbus","onModbusCommandDone","resp","msg","onModbusCommandError","err","data","message","sendEmptyMsgOnFail","setModbusError","logMsgError","topic","messageId","getOriginalMessage","bufferMessageList","payload","origMsg","unitid","fc","functionCodeModbusRead","buildNewMessageObject","getObjectId","id","value","verboseWarn","address","isReadyForInput","client","isActive","setTimeout","initializeInputDelayTimer","isNotReadyForInput","on","newMsg","isInactive","removeAllListeners","assign","deregisterForModbus","done","origMsgInput","set","buildNewMessage","actualServiceState","errorProtocolMsg","clear","setNodeDefaultStatus"],"mappings":"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","file":"../modbus-getter.js","sourcesContent":["/**\n Copyright (c) since the year 2016 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n\n/**\n * Modbus Getter node.\n * @module NodeRedModbusGetter\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const mbCore = require('./core/modbus-core')\n  const mbIOCore = require('./core/modbus-io-core')\n  const internalDebugLog = require('debug')('contribModbus:getter')\n\n  function ModbusGetter (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.unitid = config.unitid\n\n    this.dataType = config.dataType\n    this.adr = config.adr\n    this.quantity = config.quantity\n\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.showWarnings = config.showWarnings\n    this.msgThruput = config.msgThruput\n    this.connection = null\n\n    this.useIOFile = config.useIOFile\n    this.ioFile = RED.nodes.getNode(config.ioFile)\n    this.useIOForPayload = config.useIOForPayload\n    this.logIOActivities = config.logIOActivities\n\n    this.emptyMsgOnFail = config.emptyMsgOnFail\n    this.keepMsgProperties = config.keepMsgProperties\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    this.delayOnStart = config.delayOnStart\n    this.startDelayTime = parseInt(config.startDelayTime) || 10\n\n    const node = this\n    node.bufferMessageList = new Map()\n    node.INPUT_TIMEOUT_MILLISECONDS = 1000\n    node.delayOccured = false\n    node.inputDelayTimer = null\n\n    mbBasics.setNodeStatusTo('waiting', node)\n\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n    modbusClient.registerForModbus(node)\n    mbBasics.initModbusClientEvents(node, modbusClient)\n\n    node.onModbusCommandDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo('reading done', node)\n      }\n      node.send(mbIOCore.buildMessageWithIO(node, resp.data, resp, msg))\n      node.emit('modbusGetterNodeDone')\n    }\n\n    node.errorProtocolMsg = function (err, msg) {\n      if (node.showErrors) {\n        mbBasics.logMsgError(node, err, msg)\n      }\n    }\n\n    node.onModbusCommandError = function (err, msg) {\n      node.internalDebugLog(err.message)\n      const origMsg = mbCore.getOriginalMessage(node.bufferMessageList, msg)\n      node.errorProtocolMsg(err, origMsg)\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\n      mbBasics.setModbusError(node, modbusClient, err, origMsg)\n      node.emit('modbusGetterNodeError')\n    }\n\n    node.buildNewMessageObject = function (node, msg) {\n      const messageId = mbCore.getObjectId()\n      return {\n        topic: msg.topic || node.id,\n        messageId,\n        payload: {\n          value: msg.payload.value || msg.payload,\n          unitid: node.unitid,\n          fc: mbCore.functionCodeModbusRead(node.dataType),\n          address: node.adr,\n          quantity: node.quantity,\n          messageId\n        }\n      }\n    }\n\n    /* istanbul ignore next */\n    function verboseWarn (logMessage) {\n      if (RED.settings.verbose && node.showWarnings) {\n        node.warn('Getter -> ' + logMessage)\n      }\n    }\n\n    node.isReadyForInput = function () {\n      return (modbusClient.client && modbusClient.isActive() && node.delayOccured)\n    }\n\n    node.isNotReadyForInput = function () {\n      return !node.isReadyForInput()\n    }\n\n    node.resetInputDelayTimer = function () {\n      if (node.inputDelayTimer) {\n        /* istanbul ignore next */\n        verboseWarn('reset input delay timer node ' + node.id)\n        clearTimeout(node.inputDelayTimer)\n      }\n      node.inputDelayTimer = null\n      node.delayOccured = false\n    }\n\n    node.initializeInputDelayTimer = function () {\n      node.resetInputDelayTimer()\n      if (node.delayOnStart) {\n        /* istanbul ignore next */\n        verboseWarn('initialize input delay timer node ' + node.id)\n        node.inputDelayTimer = setTimeout(() => {\n          node.delayOccured = true\n        }, node.INPUT_TIMEOUT_MILLISECONDS * node.startDelayTime)\n      } else {\n        node.delayOccured = true\n      }\n    }\n\n    node.initializeInputDelayTimer()\n\n    node.on('input', function (msg) {\n      /* istanbul ignore next */\n      if (mbBasics.invalidPayloadIn(msg)) {\n        verboseWarn('Invalid message on input.')\n        return\n      }\n      /* istanbul ignore next */\n      if (node.isNotReadyForInput()) {\n        verboseWarn('Inject while node is not ready for input.')\n        return\n      }\n      /* istanbul ignore next */\n      if (modbusClient.isInactive()) {\n        verboseWarn('You sent an input to inactive client. Please use initial delay on start or send data more slowly.')\n        return\n      }\n\n      const origMsgInput = Object.assign({}, msg) // keep it origin\n      try {\n        const newMsg = node.buildNewMessageObject(node, origMsgInput)\n        node.bufferMessageList.set(newMsg.messageId, mbBasics.buildNewMessage(node.keepMsgProperties, origMsgInput, newMsg))\n        modbusClient.emit('readModbus', newMsg, node.onModbusCommandDone, node.onModbusCommandError)\n\n        if (node.showStatusActivities) {\n          mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\n        }\n      } catch (err) {\n        /* istanbul ignore next */\n        node.errorProtocolMsg(err, origMsgInput)\n        /* istanbul ignore next */\n        mbBasics.sendEmptyMsgOnFail(node, err, origMsgInput)\n      }\n    })\n\n    node.on('close', function (done) {\n      mbBasics.setNodeStatusTo('closed', node)\n      node.resetInputDelayTimer()\n      node.removeAllListeners()\n      node.bufferMessageList.clear()\n      modbusClient.deregisterForModbus(node.id, done)\n    })\n\n    if (!node.showStatusActivities) {\n      mbBasics.setNodeDefaultStatus(node)\n    }\n  }\n\n  RED.nodes.registerType('modbus-getter', ModbusGetter)\n}\n"]}