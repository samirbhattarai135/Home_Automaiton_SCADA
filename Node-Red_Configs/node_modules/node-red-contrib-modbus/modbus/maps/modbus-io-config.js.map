{"version":3,"sources":["modbus-io-config.js"],"names":["module","exports","RED","install","coreIO","require","nodes","registerType","config","line","setMaxListeners","UNLIMITED_LISTENERS","this","name","path","format","addressOffset","node","lastUpdatedAt","fs","warn","configData","lineReader","on","err","message","payload","push","internalDebug","Date","now","allValueNamesFromIOFile","setLineReaderEvents","watcher","LineByLineReader","removeAllListeners","curr","prev","mtime","concat","done","unwatchFile","stop"],"mappings":"AAaAA,OAAAC,QAAA,SAAAC,GAEAF,QAAOC,oBAAuB,EAAEE,QAAA,EAC9B,IAAAC,EAAYC,QAAA,uBAAA,EAiFZH,EAAII,MAAMC,aAAa,mBAhFvBF,SAA6BG,GAC7B,IAiCYC,EAjCNL,EAASC,QAAQ,UAAA,EAchBK,GAVLR,EAAMS,MAAAA,WAAAA,KAAuBH,CAAA,EAI7BI,KAAKC,KAAOL,EAAOK,KACnBD,KAAKE,KAAON,EAAOM,KACnBF,KAAKG,OAASP,EAAOO,OACrBH,KAAKI,cAAgBR,EAAOQ,cAGvBN,MACLO,EAAKC,gBAbsBV,CAaF,EAEzBS,EAAKE,cAAcF,KAEjBA,EAAKG,WAAKH,EAAAH,IAAA,GAcFL,EARR,WACEQ,EAQIA,WAAKI,mBAAqB,EAE9BJ,EAAEK,WAAAC,GAAA,QAAA,SAAAC,GAEFP,EAAKK,cAAcE,EAAOC,OAAA,CAR1B,CAAC,EAEDR,EASEA,WAAUM,GAAA,OAAA,SAAAd,GACRiB,GACAb,EAAIQ,WAAEM,KAAAlB,CAAA,CAPV,CAAC,EAWDQ,EAAEK,WAAAC,GAAA,MAAA,WAEFnB,EAAOwB,cAAcC,KAAAC,IAAA,EACtB1B,EAAAwB,cAAA,0BAAAX,EAAAH,IAAA,EA7BGG,EAACK,KAAAA,CACCI,QAACE,EAAcG,wBAAuBjB,CAAK,EAC5CO,KAAAA,kCA6BLW,KAAAA,EAAAA,IAEI,CAACC,EACH7B,EAAOwB,KAAAA,gBAAaX,EAAAI,UAAA,CACpBjB,CAAAA,EAPAA,EAUEA,cAAOwB,+BAA4CX,EAAAH,IAAA,CATvD,EA7BAG,EAOEA,WAAgBM,IAAGnB,EAAO8B,iBAAiBjB,EAAAH,IAAA,EAN7CV,EAOIA,cAAOwB,gBAA0BX,EAAAH,IAAA,EANrCG,EAOII,WAAA,GAsBJW,EAUoBG,EARpBlB,EAUIe,QAAAA,EAAAA,UAAqBf,EAAAH,KAAA,SAAAsB,EAAAC,GATvBjC,EAUEA,cAAOwB,yBAAAA,OAAcQ,EAAAE,KAAgC,CAAGrB,EAC1Db,EAAAwB,cAAA,2BAAAW,OAAAF,EAAAC,KAAA,CAAA,EAEJF,EAAAE,QAAAD,EAAAC,QAEKf,EAAGK,cAAmBY,kBAAMvB,EAAAH,IAAA,EAC5B2B,EAAAA,WAAiB3B,GAChB,OAACmB,EAAQS,cACTzB,EAACK,WAAWa,mBAAoB,EAChClB,EAACkB,WAAAA,IAAoB/B,EAAA8B,iBAAAjB,EAAAH,IAAA,EACrBkB,EAAE,EACN5B,EAAAwB,cAAA,iCAAAX,EAAAH,IAAA,EAGAR,CAAAA,IA3DDF,EAAMwB,cAAA,qBAAAX,EAAAH,IAAA,EAAAG,EAKIe,KAAAA,4BAAAA,EAAAA,IAAAA,GA6CXf,EAAKM,GAAG,QAAS,SAAUiB,GACzBrB,EAAGsB,YAAYxB,EAAKH,IAAI,EACxBG,EAAKgB,QAAQS,KAAK,EAClBzB,EAAKK,WAAWa,mBAAmB,EACnClB,EAAKkB,mBAAmB,EACxBK,EAAK,CACP,CAAC,CACH,CAE6D,CAC/D","file":"../modbus-io-config.js","sourcesContent":["/**\n Copyright (c) since the year 2016 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-modbus\n node-red-contrib-modbusio\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n\n/**\n * Modbus IO Config node.\n * @module NodeRedModbusIOConfig\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const coreIO = require('./core/modbus-io-core')\n\n  function ModbusIOConfigNode (config) {\n    const fs = require('fs-extra')\n    const UNLIMITED_LISTENERS = 0\n\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.path = config.path\n    this.format = config.format\n    this.addressOffset = config.addressOffset\n\n    const node = this\n    node.setMaxListeners(UNLIMITED_LISTENERS)\n    node.lastUpdatedAt = null\n\n    if (!fs.existsSync(node.path)) {\n      coreIO.internalDebug('IO File Not Found ' + node.path)\n      node.warn('Modbus IO File Not Found ' + node.path)\n    } else {\n      node.lineReader = new coreIO.LineByLineReader(node.path)\n      coreIO.internalDebug('Read IO File ' + node.path)\n      node.configData = []\n\n      function setLineReaderEvents () {\n        node.lineReader.removeAllListeners()\n\n        node.lineReader.on('error', function (err) {\n          coreIO.internalDebug(err.message)\n        })\n\n        node.lineReader.on('line', function (line) {\n          if (line) {\n            node.configData.push(line)\n          }\n        })\n\n        node.lineReader.on('end', function () {\n          node.lastUpdatedAt = Date.now()\n          coreIO.internalDebug('Read IO Done From File ' + node.path)\n          node.warn({\n            payload: coreIO.allValueNamesFromIOFile(node),\n            name: 'Modbus Value Names From IO File',\n            path: node.path\n          })\n          node.emit('updatedConfig', node.configData)\n        })\n\n        coreIO.internalDebug('Loading IO File Started For ' + node.path)\n      }\n\n      setLineReaderEvents()\n\n      node.watcher = fs.watchFile(node.path, (curr, prev) => {\n        coreIO.internalDebug(`the current mtime is: ${curr.mtime}`)\n        coreIO.internalDebug(`the previous mtime was: ${prev.mtime}`)\n\n        if (curr.mtime !== prev.mtime) {\n          coreIO.internalDebug('Reload IO File ' + node.path)\n          node.configData = []\n          delete node.lastUpdatedAt\n          node.lineReader.removeAllListeners()\n          node.lineReader = new coreIO.LineByLineReader(node.path)\n          setLineReaderEvents()\n          coreIO.internalDebug('Reloading IO File Started For ' + node.path)\n        }\n      })\n    }\n\n    node.on('close', function (done) {\n      fs.unwatchFile(node.path)\n      node.watcher.stop()\n      node.lineReader.removeAllListeners()\n      node.removeAllListeners()\n      done()\n    })\n  }\n\n  RED.nodes.registerType('modbus-io-config', ModbusIOConfigNode)\n}\n"]}