{"version":3,"sources":["core/modbus-client-core.js"],"names":["require","install","de","biancoroyal","modbus","core","client","internalDebug","internalDebugFSM","modbusSerialDebug","XStateFSM","stateLogEnabled","networkErrors","this","id","new","BREAK","STOP","broken","createMachine","FAILURE","ACTIVATE","RECONNECT","reconnecting","on","INIT","initial","OPENSERIAL","CONNECT","SWITCH","states","CLOSE","connected","QUEUE","activated","READ","WRITE","queueing","SEND","EMPTY","empty","sending","reading","writing","failed","switch","stopped","NEW","getActualUnitId","node","msg","Number","isInteger","payload","unitid","parseInt","queueUnitId","unit_id","startStateService","toggleMachine","interpret","start","checkUnitId","clientType","getLogFunction","activateSendingOnSuccess","cb","cberr","resp","activateSending","then","err","stateService","send","activateSendingOnFailure","readModbusByFunctionCodeOne","address","quantity","coreClient","Error","message","modbusErrorHandling","readModbusByFunctionCodeTwo","readDiscreteInputs","readModbusByFunctionCodeThree","readHoldingRegisters","readModbusByFunctionCodeFour","sendCustomFunctionCode","sendCustomFc","fc","requestCard","responseCard","readModbusByFunctionCode","nodeLog","customModbusMessage","delayTime","_client","readable","setTimeout","bufferCommands","JSON","stringify","info","timeout","getTimeout","setUnitIdFromPayload","clientTimeout","readModbus","readCoils","connectClient","queueLog","value","readInputRegisters","writeModbusByFunctionCodeFive","writeCoil","length","writeCoils","_port","writeModbusByFunctionCodeSix","writeRegister","getID","writeModbusByFunctionCodeSixteen","writeRegisters","clienttype","writeModbus","state","actualServiceState","writeModbusByFunctionCodeFifteen","setNewTCPNodeSettings","tcpHost","tcpPort","serialPort","serialBaudrate","serialDatabits","serialStopbits","serialParity","serialType","serialAsciiResponseStartDelimiter","serialConnectionDelay","unitId","commandDelay","reconnectTimeout","setNewNodeSettings","tcpType","connectorType","setNewNodeOptionalSettings","messageAllowedStates","module","exports"],"mappings":"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","file":"../../core/modbus-client-core.js","sourcesContent":["/**\n Copyright (c) since the year 2016 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-modbus\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n'use strict'\nrequire('source-map-support').install()\n\n// eslint-disable-next-line no-var\nvar de = de || { biancoroyal: { modbus: { core: { client: {} } } } } // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.internalDebug = de.biancoroyal.modbus.core.client.internalDebug || require('debug')('contribModbus:core:client') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.internalDebugFSM = de.biancoroyal.modbus.core.client.internalDebugFSM || require('debug')('contribModbus:core:client:fsm') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.modbusSerialDebug = de.biancoroyal.modbus.core.client.modbusSerialDebug || require('debug')('modbus-serial') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.XStateFSM = de.biancoroyal.modbus.core.client.XStateFSM || require('@xstate/fsm') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.stateLogEnabled = de.biancoroyal.modbus.core.client.stateLogEnabled || false // eslint-disable-line no-use-before-define\n\nde.biancoroyal.modbus.core.client.networkErrors = ['ESOCKETTIMEDOUT', 'ETIMEDOUT', 'ECONNRESET', 'ENETRESET',\n  'ECONNABORTED', 'ECONNREFUSED', 'ENETUNREACH', 'ENOTCONN',\n  'ESHUTDOWN', 'EHOSTDOWN', 'ENETDOWN', 'EWOULDBLOCK', 'EAGAIN', 'EHOSTUNREACH']\n\nde.biancoroyal.modbus.core.client.createStateMachineService = function () {\n  this.stateLogEnabled = false\n\n  return this.XStateFSM.createMachine({\n    id: 'modbus',\n    initial: 'new',\n    states: {\n      new: { on: { INIT: 'init', BREAK: 'broken', STOP: 'stopped' } },\n      broken: { on: { INIT: 'init', STOP: 'stopped', FAILURE: 'failed', ACTIVATE: 'activated', RECONNECT: 'reconnecting' } },\n      reconnecting: { on: { INIT: 'init', STOP: 'stopped' } },\n      init: { on: { OPENSERIAL: 'opened', CONNECT: 'connected', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' } },\n      opened: { on: { CONNECT: 'connected', BREAK: 'broken', FAILURE: 'failed', CLOSE: 'closed', STOP: 'stopped', SWITCH: 'switch' } },\n      connected: { on: { CLOSE: 'closed', ACTIVATE: 'activated', QUEUE: 'queueing', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' } },\n      activated: { on: { READ: 'reading', WRITE: 'writing', QUEUE: 'queueing', BREAK: 'broken', CLOSE: 'closed', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' } },\n      queueing: { on: { ACTIVATE: 'activated', SEND: 'sending', READ: 'reading', WRITE: 'writing', EMPTY: 'empty', BREAK: 'broken', CLOSE: 'closed', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' } },\n      empty: { on: { QUEUE: 'queueing', BREAK: 'broken', FAILURE: 'failed', CLOSE: 'closed', STOP: 'stopped', SWITCH: 'switch' } },\n      sending: { on: { ACTIVATE: 'activated', READ: 'reading', WRITE: 'writing', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' } },\n      reading: { on: { ACTIVATE: 'activated', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped' } },\n      writing: { on: { ACTIVATE: 'activated', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped' } },\n      closed: { on: { FAILURE: 'failed', BREAK: 'broken', CONNECT: 'connected', RECONNECT: 'reconnecting', INIT: 'init', STOP: 'stopped', SWITCH: 'switch' } },\n      failed: { on: { CLOSE: 'closed', BREAK: 'broken', STOP: 'stopped', SWITCH: 'switch' } },\n      switch: { on: { CLOSE: 'closed', BREAK: 'broken', STOP: 'stopped' } },\n      stopped: { on: { NEW: 'new', STOP: 'stopped' } }\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.getActualUnitId = function (node, msg) {\n  if (msg.payload && Number.isInteger(msg.payload.unitid)) {\n    return parseInt(msg.payload.unitid)\n  } else if (Number.isInteger(msg.queueUnitId)) {\n    return parseInt(msg.queueUnitId)\n  } else {\n    return parseInt(node.unit_id) || 0\n  }\n}\n\nde.biancoroyal.modbus.core.client.startStateService = function (toggleMachine) {\n  return this.XStateFSM.interpret(toggleMachine).start()\n}\n\nde.biancoroyal.modbus.core.client.checkUnitId = function (unitid, clientType) {\n  if (clientType === 'tcp') {\n    return unitid >= 0 && unitid <= 255\n  } else {\n    return unitid >= 0 && unitid <= 247\n  }\n}\n\nde.biancoroyal.modbus.core.client.getLogFunction = function (node) {\n  if (node.internalDebugLog) {\n    return node.internalDebugLog\n  } else {\n    return de.biancoroyal.modbus.core.client.internalDebug\n  }\n}\n\nde.biancoroyal.modbus.core.client.activateSendingOnSuccess = function (node, cb, cberr, resp, msg) {\n  node.activateSending(msg).then(function () {\n    cb(resp, msg)\n  }).catch(function (err) {\n    cberr(err, msg)\n  }).finally(function () {\n    node.stateService.send('ACTIVATE')\n  })\n}\n\nde.biancoroyal.modbus.core.client.activateSendingOnFailure = function (node, cberr, err, msg) {\n  node.activateSending(msg).then(function () {\n    cberr(err, msg)\n  }).catch(function (err) {\n    cberr(err, msg)\n  }).finally(function () {\n    node.stateService.send('ACTIVATE')\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeOne = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readCoils(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeTwo = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readDiscreteInputs(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeThree = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readHoldingRegisters(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeFour = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readInputRegisters(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.sendCustomFunctionCode = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  // const nodeLog = deb.biancoroyal.modbus.core.client.getLogFunction(node)\n\n  node.client.sendCustomFc(msg.payload.unitid, msg.payload.fc, msg.payload.requestCard, msg.payload.responseCard).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCode = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n\n  switch (parseInt(msg.payload.fc)) {\n    case 1:\n      coreClient.readModbusByFunctionCodeOne(node, msg, cb, cberr)\n      break\n    case 2:\n      coreClient.readModbusByFunctionCodeTwo(node, msg, cb, cberr)\n      break\n    case 3:\n      coreClient.readModbusByFunctionCodeThree(node, msg, cb, cberr)\n      break\n    case 4:\n      coreClient.readModbusByFunctionCodeFour(node, msg, cb, cberr)\n      break\n    default:\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Function Code Unknown'), msg)\n      nodeLog('Function Code Unknown %s', msg.payload.fc)\n      break\n  }\n}\n\nde.biancoroyal.modbus.core.client.customModbusMessage = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n  let delayTime = 1\n\n  if (!node.client) {\n    nodeLog('Client Not Ready As Object On Reading Modbus')\n    return\n  }\n\n  if (node.client._port && node.client._port._client && !node.client._port._client.readable) {\n    if (!node.connectClient()) {\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Modbus-Read Error from client connecting'), msg)\n      return\n    }\n    delayTime = 500\n  }\n\n  setTimeout(function () {\n    if (!node.bufferCommands) {\n      if (node.clienttype !== 'tcp') {\n        node.stateService.send('READ')\n      }\n    } else {\n      node.queueLog(JSON.stringify({\n        info: 'read msg via Modbus',\n        message: msg.payload,\n        queueUnitId: msg.queueUnitId,\n        timeout: node.client.getTimeout(),\n        state: node.actualServiceState.value\n      }))\n    }\n\n    node.setUnitIdFromPayload(msg)\n    node.client.setTimeout(node.clientTimeout)\n\n    try {\n      coreClient.sendCustomFunctionCode(node, msg, cb, cberr)\n    } catch (err) {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      nodeLog(err.message)\n      node.modbusErrorHandling(err)\n    }\n  }, delayTime)\n}\n\nde.biancoroyal.modbus.core.client.readModbus = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n  let delayTime = 1\n\n  if (!node.client) {\n    nodeLog('Client Not Ready As Object On Reading Modbus')\n    return\n  }\n\n  if (node.client._port && node.client._port._client && !node.client._port._client.readable) {\n    if (!node.connectClient()) {\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Modbus-Read Error from client connecting'), msg)\n      return\n    }\n    delayTime = 500\n  }\n\n  setTimeout(function () {\n    if (!node.bufferCommands) {\n      if (node.clienttype !== 'tcp') {\n        node.stateService.send('READ')\n      }\n    } else {\n      node.queueLog(JSON.stringify({\n        info: 'read msg via Modbus',\n        message: msg.payload,\n        queueUnitId: msg.queueUnitId,\n        timeout: node.client.getTimeout(),\n        state: node.actualServiceState.value\n      }))\n    }\n\n    node.setUnitIdFromPayload(msg)\n    node.client.setTimeout(node.clientTimeout)\n\n    try {\n      coreClient.readModbusByFunctionCode(node, msg, cb, cberr)\n    } catch (err) {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      nodeLog(err.message)\n      node.modbusErrorHandling(err)\n    }\n  }, delayTime)\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFive = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (msg.payload.value) {\n    msg.payload.value = true\n  } else {\n    msg.payload.value = false\n  }\n  node.client.writeCoil(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    if (node.client.getID() === 0) {\n      const resp = {\n        address: parseInt(msg.payload.address),\n        value: parseInt(msg.payload.value)\n      }\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    } else {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      node.modbusErrorHandling(err)\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFifteen = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (parseInt(msg.payload.value.length) !== parseInt(msg.payload.quantity)) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error('Quantity should be less or equal to coil payload array length: ' +\n      msg.payload.value.length + ' Addr: ' + msg.payload.address + ' Q: ' + msg.payload.quantity), msg)\n  } else {\n    node.client.writeCoils(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    }).catch(function (err) {\n      if (node.client.getID() === 0) {\n        const resp = {\n          address: parseInt(msg.payload.address),\n          value: parseInt(msg.payload.value)\n        }\n        coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n      } else {\n        coreClient.activateSendingOnFailure(node, cberr, err, msg)\n        node.modbusErrorHandling(err)\n      }\n    })\n  }\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeSix = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.writeRegister(parseInt(msg.payload.address), parseInt(msg.payload.value)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    if (node.client.getID() === 0) {\n      const resp = {\n        address: parseInt(msg.payload.address),\n        value: parseInt(msg.payload.value)\n      }\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    } else {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      node.modbusErrorHandling(err)\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeSixteen = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (parseInt(msg.payload.value.length) !== parseInt(msg.payload.quantity)) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error('Quantity should be less or equal to register payload array length: ' +\n      msg.payload.value.length + ' Addr: ' + msg.payload.address + ' Q: ' + msg.payload.quantity), msg)\n  } else {\n    node.client.writeRegisters(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    }).catch(function (err) {\n      if (node.client.getID() === 0) {\n        const resp = {\n          address: parseInt(msg.payload.address),\n          value: parseInt(msg.payload.value)\n        }\n        coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n      } else {\n        coreClient.activateSendingOnFailure(node, cberr, err, msg)\n        /* istanbul ignore next */\n        node.modbusErrorHandling(err)\n      }\n    })\n  }\n}\n\nde.biancoroyal.modbus.core.client.writeModbus = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n  let delayTime = 1\n  if (!node.client) {\n    nodeLog('Client Not Ready As Object On Writing Modbus')\n    return\n  }\n\n  if (node.client._port && node.client._port._client && !node.client._port._client.writable) {\n    if (!node.connectClient()) {\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Modbus-Read Error from client connecting'), msg)\n      return\n    }\n    /* istanbul ignore next */\n    delayTime = 500\n  }\n\n  setTimeout(function () {\n    if (!node.bufferCommands) {\n      if (node.clienttype !== 'tcp') {\n        node.stateService.send('WRITE')\n      }\n    } else {\n      node.queueLog(JSON.stringify({\n        info: 'write msg',\n        message: msg.payload,\n        queueUnitId: msg.queueUnitId,\n        timeout: node.client.getTimeout(),\n        state: node.actualServiceState.value\n      }))\n    }\n\n    node.setUnitIdFromPayload(msg)\n    node.client.setTimeout(node.clientTimeout)\n\n    try {\n      switch (parseInt(msg.payload.fc)) {\n        case 15: // FC: 15\n          coreClient.writeModbusByFunctionCodeFifteen(node, msg, cb, cberr)\n          break\n        case 5: // FC: 5\n          coreClient.writeModbusByFunctionCodeFive(node, msg, cb, cberr)\n          break\n        case 16: // FC: 16\n          coreClient.writeModbusByFunctionCodeSixteen(node, msg, cb, cberr)\n          break\n        case 6: // FC: 6\n          coreClient.writeModbusByFunctionCodeSix(node, msg, cb, cberr)\n          break\n        default:\n          coreClient.activateSendingOnFailure(node, cberr, new Error('Function Code Unknown'), msg)\n          nodeLog('Function Code Unknown %s', msg.payload.fc)\n          break\n      }\n    } catch (err) {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      nodeLog(err.message)\n    }\n  }, delayTime)\n}\n\nde.biancoroyal.modbus.core.client.setNewTCPNodeSettings = function (node, msg) {\n  node.clienttype = 'tcp'\n  node.tcpHost = msg.payload.tcpHost || node.tcpHost\n  node.tcpPort = msg.payload.tcpPort || node.tcpPort\n  node.tcpType = msg.payload.tcpType || node.tcpType\n}\n\nde.biancoroyal.modbus.core.client.setNewSerialNodeSettings = function (node, msg) {\n  if (msg.payload.serialPort) {\n    node.serialPort = msg.payload.serialPort || node.serialPort\n  }\n\n  if (msg.payload.serialBaudrate) {\n    node.serialBaudrate = parseInt(msg.payload.serialBaudrate) || node.serialBaudrate\n  }\n\n  node.clienttype = 'serial'\n  node.serialDatabits = msg.payload.serialDatabits || node.serialDatabits\n  node.serialStopbits = msg.payload.serialStopbits || node.serialStopbits\n  node.serialParity = msg.payload.serialParity || node.serialParity\n  node.serialType = msg.payload.serialType || node.serialType\n\n  // Make sure is parsed when string, otherwise just assign.\n  if (msg.payload.serialAsciiResponseStartDelimiter && typeof msg.payload.serialAsciiResponseStartDelimiter === 'string') {\n    node.serialAsciiResponseStartDelimiter = parseInt(msg.payload.serialAsciiResponseStartDelimiter, 16)\n  } else {\n    node.serialAsciiResponseStartDelimiter = msg.payload.serialAsciiResponseStartDelimiter || node.serialAsciiResponseStartDelimiter\n  }\n\n  if (msg.payload.serialConnectionDelay) {\n    node.serialConnectionDelay = parseInt(msg.payload.serialConnectionDelay) || node.serialConnectionDelay\n  }\n}\n\nde.biancoroyal.modbus.core.client.setNewNodeOptionalSettings = function (node, msg) {\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n\n  try {\n    let unitId = parseInt(msg.payload.unitId)\n    if (!node.checkUnitId(unitId, node.clienttype)) {\n      unitId = node.unit_id\n    }\n    node.unit_id = unitId\n  } catch (err) {\n    nodeLog(err.message)\n  }\n\n  if (msg.payload.commandDelay) {\n    node.commandDelay = parseInt(msg.payload.commandDelay) || node.commandDelay\n  }\n\n  if (msg.payload.clientTimeout) {\n    node.clientTimeout = parseInt(msg.payload.clientTimeout) || node.clientTimeout\n  }\n\n  if (msg.payload.reconnectTimeout) {\n    node.reconnectTimeout = parseInt(msg.payload.reconnectTimeout) || node.reconnectTimeout\n  }\n}\n\nde.biancoroyal.modbus.core.client.setNewNodeSettings = function (node, msg) {\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n  const coreClient = de.biancoroyal.modbus.core.client\n\n  if (!msg) {\n    nodeLog('New Connection message invalid.')\n    return false\n  }\n\n  switch (msg.payload.connectorType.toUpperCase()) {\n    case 'TCP':\n      coreClient.setNewTCPNodeSettings(node, msg)\n      nodeLog('New Connection TCP Settings ' + node.tcpHost + ' ' + node.tcpPort + ' ' + node.tcpType)\n      break\n\n    case 'SERIAL':\n      coreClient.setNewSerialNodeSettings(node, msg)\n      nodeLog('New Connection Serial Settings ' + node.serialPort + ' ' + node.serialBaudrate + ' ' + node.serialType)\n      break\n\n    default:\n      nodeLog('Unknown Dynamic Reconnect Type ' + msg.payload.connectorType)\n  }\n\n  coreClient.setNewNodeOptionalSettings(node, msg)\n\n  return true\n}\n\nde.biancoroyal.modbus.core.client.messageAllowedStates = ['activated', 'queueing', 'sending', 'empty', 'connected']\n\nmodule.exports = de.biancoroyal.modbus.core.client\n"]}