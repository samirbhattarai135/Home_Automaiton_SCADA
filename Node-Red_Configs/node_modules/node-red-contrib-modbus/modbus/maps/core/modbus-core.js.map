{"version":3,"sources":["core/modbus-core.js"],"names":["require","install","de","biancoroyal","modbus","core","internalDebug","ObjectID","BSON","ObjectId","getObjectId","payload","messageList","origMsg","messageId","msg","functionCodeModbusRead","dataType","functionCodeModbusWrite","buildMessage","values","response","topic","responseBuffer","assign","rawMsg","Object","module","exports"],"mappings":"AAQAA,QAAQ,oBAAoB,EAAEC,QAAQ,EAEtC,IAAAC,GAAAA,IAAA,CAAAC,YAAA,CAAAC,OAAA,CAAAC,KAAA,EAAA,CAAA,CAAA,EACAH,GAAAC,YAAeC,OAAAC,KAAAC,cAAAJ,GAAAC,YAAAC,OAAAC,KAAAC,eAAAN,QAAA,OAAA,EAAA,oBAAA,EAEfE,GAFiBC,YAAaC,OAAAC,KAAAE,SAAAL,GAAAC,YAAAC,OAAAC,KAAAE,UAAAP,QAAA,MAAA,EAAAQ,KAAAC,SAI9BP,GAAGC,YAJ8CC,OAAAC,KAAAK,YAAA,WAK/C,OALiD,IAAAR,GAAAC,YAAAC,OAAAC,KAAAE,QAMnD,EALAL,GAAGC,YAAYC,OAAOC,KAAKC,mBAAmBH,SAAYC,EAAYE,GACpE,IAACH,EAAYC,EAAYG,IAAAA,EAAQI,QAAMR,WAAYC,EAAOC,SAAKE,EAa/D,OAXCJ,GAAYC,EAAOC,UACbO,EAAOT,OAAYC,EAAOC,SAAKE,GACvCL,GAAAC,YAAAC,OAAAC,KAAAC,cAAA,iEAAAO,EAAAC,SAAA,GAKCZ,GAAIW,YAAWA,OAAQC,KAAAA,cAAW,qBAAAC,EAAAJ,QAAAG,SAAA,EAChCD,EAAKD,GAGAC,CAMT,EAEAX,GALEC,YAAAC,OAAAC,KAAAW,uBAAA,SAAAC,GAEA,OAAOJ,GACR,IAAA,OAEEV,OAAAA,EACD,IAAA,QACE,OAAK,EAIL,IAHE,kBACF,OAAK,EAIL,IAHE,gBACF,OAAK,EAIL,QAFA,MAAK,CAAA,CAIP,CACF,EAEAD,GAHEC,YAAAC,OAAAC,KAAAa,wBAAA,SAAAD,GACD,OAAAA,GAEEd,IAAAA,OACD,OAAQc,EACN,IAAK,kBACH,OAAO,EACT,IAAK,SACH,OAAO,GACT,IAAK,oBACH,OAAO,GACT,QACE,MAAO,CAAA,CAGX,CACF,EAAAf,GAACC,YAAAC,OAAAC,KAAAc,aAAA,SAAAP,EAAAQ,EAAAC,EAAAN,GAEEZ,EAAYC,KAAOC,mBAAoBO,EAAUA,CAAAA,EAClDC,EAAMA,QAAcO,EACpBP,EAAQF,MAAOI,EAAGK,MAClBP,EAAQS,eAAiBD,EACzBR,EAAQU,MAAAA,OAAcC,OAAGH,GAAQN,CAAA,EAG3BU,EAASC,OAAOF,OAAS,GAAEX,CAAQ,EAM1C,OALCY,EAAOd,QAAUU,EACjBI,EAAOL,OAASA,EAChB,OAAOK,EAAOF,eAGf,CAAAV,EAAAY,EAEDE,EAAAA,OAAOC,QAAU1B,GAAGC,YAAYC,OAAOC","file":"../../core/modbus-core.js","sourcesContent":["/**\n Copyright (c) since the year 2016 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-modbus\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n'use strict'\nrequire('source-map-support').install()\n\n// eslint-disable-next-line no-var\nvar de = de || { biancoroyal: { modbus: { core: {} } } } // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.internalDebug = de.biancoroyal.modbus.core.internalDebug || require('debug')('contribModbus:core') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.ObjectID = de.biancoroyal.modbus.core.ObjectID || require('bson').BSON.ObjectId // eslint-disable-line no-use-before-define\n\nde.biancoroyal.modbus.core.getObjectId = function () {\n  return new de.biancoroyal.modbus.core.ObjectID()\n}\n\nde.biancoroyal.modbus.core.getOriginalMessage = function (messageList, msg) {\n  let origMsg = messageList.get(msg.payload.messageId || msg.messageId)\n\n  if (origMsg && origMsg.messageId) {\n    if (!messageList.delete(origMsg.messageId)) {\n      de.biancoroyal.modbus.core.internalDebug('WARNING: getOriginalMessage could not delete message from map ' + origMsg.messageId)\n    }\n  } else {\n    de.biancoroyal.modbus.core.internalDebug('Message Not Found ' + msg.payload.messageId)\n    origMsg = msg\n  }\n\n  return origMsg\n}\n\nde.biancoroyal.modbus.core.functionCodeModbusRead = function (dataType) {\n  switch (dataType) {\n    case 'Coil':\n      return 1\n    case 'Input':\n      return 2\n    case 'HoldingRegister':\n      return 3\n    case 'InputRegister':\n      return 4\n    default:\n      return -1\n  }\n}\n\nde.biancoroyal.modbus.core.functionCodeModbusWrite = function (dataType) {\n  switch (dataType) {\n    case 'Coil':\n      return 5\n    case 'HoldingRegister':\n      return 6\n    case 'MCoils':\n      return 15\n    case 'MHoldingRegisters':\n      return 16\n    default:\n      return -1\n  }\n}\n\nde.biancoroyal.modbus.core.buildMessage = function (messageList, values, response, msg) {\n  const origMsg = this.getOriginalMessage(messageList, msg)\n  origMsg.payload = values\n  origMsg.topic = msg.topic\n  origMsg.responseBuffer = response\n  origMsg.input = Object.assign({}, msg)\n\n  const rawMsg = Object.assign({}, origMsg)\n  rawMsg.payload = response\n  rawMsg.values = values\n  delete rawMsg.responseBuffer\n\n  return [origMsg, rawMsg]\n}\n\nmodule.exports = de.biancoroyal.modbus.core\n"]}