{"version":3,"sources":["modbus-flex-fc.js"],"names":["module","exports","RED","install","mbBasics","require","mbCore","nodes","registerType","config","internalDebugLog","createNode","this","name","topic","showStatusActivities","showErrors","showWarnings","connection","verboseLogging","fc","settings","verbose","responseCard","requestCard","node","statusText","verboseWarn","logMessage","environmentVerbosity","warn","adr","setNodeStatusWithTimeTo","id","modbusClient","getNode","server","filepath","statusValue","resolvedPath","resolve","readFile","error","statusOptions","status","response","code","newStatusText","message","fill","shape","text","isReadyForInput","client","isActive","isNotReadyForInput","onModbusConnect","onModbusInit","serialSendingAllowed","onModbusActive","failureMsg","onModbusQueue","onModbusReadDone","onModbusClose","onModbusReadError","err","setModbusError","mapPath","msg","body","req","res","payload","input","sendingNodeId","errorProtocolMsg","from","messageId","getObjectId","sendEmptyMsgOnFail","modbusRead","removeListener","parseInt","isValidCustomFc","origMsgInput","removeNodeListenerFromModbusClient","onModbusError","invalidPayloadIn","onModbusBroken","onModbusRegister","unitid","isInactive","buildNewMessageObject","msgToSend","emit","setNodeStatusTo","on","sendMessage","actualServiceState","ModbusFlexFc","json","registerForModbus","httpAdmin","post","auth","needsPermission","fs","path","endsWith","data","JSON","parse"],"mappings":"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","file":"../modbus-flex-fc.js","sourcesContent":["/**\n Copyright (c) since the year 2016 Klaus Landsdorf (http://plus4nodered.com/)\n Copyright 2016 - Jason D. Harper, Argonne National Laboratory\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc.\n All rights reserved.\n node-red-contrib-modbus\n **/\n\n/**\n * Modbus Custom Function Code.\n * @module NodeRedModbusFlexFc\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const mbCore = require('./core/modbus-core')\n  const internalDebugLog = require('debug')('contribModbus:read')\n\n  function ModbusFlexFc (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.topic = config.topic\n    this.unitid = config.unitid\n\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.showWarnings = config.showWarnings\n    this.connection = null\n\n    this.emptyMsgOnFail = config.emptyMsgOnFail\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    this.fc = config.fc\n    this.requestCard = config.requestCard\n    this.responseCard = config.responseCard\n\n    // __WARN__: These properties are for testing the Node and they should not be used in the Code directly!\n    // NOTE(Kay): We cache the verbosity level of the RED object to make verboseWarn testable!\n    this.environmentVerbosity = RED.settings.verbose\n\n    const node = this\n    node.statusText = 'waiting'\n    setNodeStatusWithTimeTo(node.statusText)\n    /* istanbul ignore next */\n    function verboseWarn (logMessage) {\n      if (node.environmentVerbosity && node.showWarnings) {\n        node.warn('Read -> ' + logMessage + ' address: ' + node.adr)\n      }\n    }\n    /* istanbul ignore next */\n    verboseWarn('open node ' + node.id)\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n\n    node.isReadyForInput = function () {\n      return (modbusClient.client && modbusClient.isActive())\n    }\n\n    node.isNotReadyForInput = function () {\n      return !node.isReadyForInput()\n    }\n\n    node.onModbusInit = function () {\n      setNodeStatusWithTimeTo('initialized')\n    }\n\n    node.onModbusConnect = function () {\n      setNodeStatusWithTimeTo('connected')\n      node.modbusRead()\n    }\n\n    node.onModbusRegister = function () {\n      if (node.showStatusActivities) {\n        setNodeStatusWithTimeTo('registered')\n      }\n\n      if (modbusClient.serialSendingAllowed) {\n        setNodeStatusWithTimeTo('connected')\n      }\n    }\n\n    node.onModbusActive = function () {\n      setNodeStatusWithTimeTo('active')\n    }\n\n    node.onModbusQueue = function () {\n      setNodeStatusWithTimeTo('queue')\n    }\n\n    node.onModbusError = function (failureMsg) {\n      setNodeStatusWithTimeTo('failure')\n      if (node.showErrors) {\n        node.warn(failureMsg)\n      }\n    }\n\n    node.onModbusClose = function () {\n      setNodeStatusWithTimeTo('closed')\n    }\n\n    node.onModbusBroken = function () {\n      setNodeStatusWithTimeTo('broken')\n    }\n\n    node.onModbusReadDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        setNodeStatusWithTimeTo('reading done')\n      }\n      sendMessage(resp.data, resp, msg)\n    }\n\n    node.errorProtocolMsg = function (err, msg) {\n      if (node.showErrors) {\n        mbBasics.logMsgError(node, err, msg)\n      }\n    }\n\n    node.onModbusReadError = function (err, msg) {\n      node.internalDebugLog(err.message)\n      node.errorProtocolMsg(err, msg)\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\n      mbBasics.setModbusError(node, modbusClient, err, msg)\n    }\n\n    node.modbusRead = function () {\n      if (!modbusClient.client) {\n        setNodeStatusWithTimeTo('waiting')\n        return\n      }\n\n      const msg = {\n        topic: 'customFc',\n        from: node.name,\n        payload: {\n          unitid: parseInt(node.unitid),\n          fc: parseInt(node.fc, 16),\n          requestCard: node.requestCard,\n          responseCard: node.responseCard,\n          messageId: mbCore.getObjectId()\n        }\n      }\n\n      if (node.showStatusActivities) {\n        setNodeStatusWithTimeTo('reading')\n      }\n\n      modbusClient.emit('customModbusMessage', msg, node.onModbusReadDone, node.onModbusReadError)\n    }\n\n    node.removeNodeListenerFromModbusClient = function () {\n      modbusClient.removeListener('mbinit', node.onModbusInit)\n      modbusClient.removeListener('mbqueue', node.onModbusQueue)\n      modbusClient.removeListener('mbconnected', node.onModbusConnect)\n      modbusClient.removeListener('mbactive', node.onModbusActive)\n      modbusClient.removeListener('mberror', node.onModbusError)\n      modbusClient.removeListener('mbclosed', node.onModbusClose)\n      modbusClient.removeListener('mbbroken', node.onModbusBroken)\n      modbusClient.removeListener('mbregister', node.onModbusRegister)\n      modbusClient.removeListener('mbderegister', node.onModbusClose)\n    }\n\n    node.isValidCustomFc = function (origMsgInput) {\n      return origMsgInput.payload &&\n        origMsgInput.topic === 'customFc' &&\n        origMsgInput.payload.unitid &&\n        origMsgInput.payload.fc &&\n        origMsgInput.payload.requestCard &&\n        origMsgInput.payload.responseCard\n    }\n\n    node.buildNewMessageObject = function (origMsgInput) {\n      return (node.isValidCustomFc(origMsgInput))\n        ? origMsgInput\n        : {\n            topic: 'customFc',\n            payload: {\n              unitid: parseInt(node.unitid),\n              fc: parseInt(node.fc, 16),\n              requestCard: node.requestCard,\n              responseCard: node.responseCard,\n              from: node.name\n            }\n          }\n    }\n\n    node.on('input', function (msg) {\n      /* istanbul ignore next */\n      if (mbBasics.invalidPayloadIn(msg)) {\n        verboseWarn('Invalid message on input.')\n        return\n      }\n      /* istanbul ignore next */\n      if (node.isNotReadyForInput()) {\n        verboseWarn('Inject while node is not ready for input.')\n        return\n      }\n      /* istanbul ignore next */\n      if (modbusClient.isInactive()) {\n        verboseWarn('You sent an input to inactive client. Please use initial delay on start or send data more slowly.')\n        return\n      }\n\n      const origMsgInput = Object.assign({}, msg) // keep it origin\n      try {\n        // const newMsg = node.buildNewMessageObject(node, origMsgInput)\n\n        const msgToSend = node.buildNewMessageObject(origMsgInput)\n\n        msgToSend.payload.messageId = mbCore.getObjectId()\n\n        modbusClient.emit('customModbusMessage', msgToSend, node.onModbusReadDone, node.onModbusReadError)\n\n        if (node.showStatusActivities) {\n          mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\n        }\n      } catch (err) {\n        node.errorProtocolMsg(err, origMsgInput)\n        mbBasics.sendEmptyMsgOnFail(node, err, origMsgInput)\n      }\n    })\n\n    this.on('close', function (done) {\n      // TODO\n      // node.resetAllReadingTimer()\n      node.removeNodeListenerFromModbusClient()\n      setNodeStatusWithTimeTo('closed')\n      /* istanbul ignore next */\n      verboseWarn('close node ' + node.id)\n      modbusClient.deregisterForModbus(node.id, done)\n    })\n\n    function sendMessage (values, response, msg) {\n      const topic = msg.topic || node.topic\n\n      node.send({\n        topic,\n        payload: response,\n        input: msg,\n        sendingNodeId: node.id\n      })\n    }\n\n    function setNodeStatusWithTimeTo (statusValue) {\n      const statusOptions = mbBasics.setNodeStatusProperties(statusValue, node.showStatusActivities)\n      const statusText = node.statusText\n\n      const newStatusText = statusOptions.status\n      if (newStatusText !== statusText) {\n        node.statusText = newStatusText\n        node.status({\n          fill: statusOptions.fill,\n          shape: statusOptions.shape,\n          text: newStatusText\n        })\n      }\n    }\n\n    if (node.showStatusActivities) {\n      modbusClient.on('mbinit', node.onModbusInit)\n      modbusClient.on('mbqueue', node.onModbusQueue)\n    }\n\n    modbusClient.on('mbconnected', node.onModbusConnect)\n    modbusClient.on('mbactive', node.onModbusActive)\n    modbusClient.on('mberror', node.onModbusError)\n    modbusClient.on('mbclosed', node.onModbusClose)\n    modbusClient.on('mbbroken', node.onModbusBroken)\n    modbusClient.on('mbregister', node.onModbusRegister)\n    modbusClient.on('mbderegister', node.onModbusClose)\n\n    modbusClient.registerForModbus(node)\n  }\n\n  RED.nodes.registerType('modbus-flex-fc', ModbusFlexFc)\n\n  RED.httpAdmin.post('/modbus/fc/:id', RED.auth.needsPermission('modbus.read'), function (req, res) {\n    const fs = require('fs')\n    const path = require('node:path')\n\n    const mapPath = req.body.mapPath\n\n    if (req.body.mapPath) {\n      if (req.body.mapPath.endsWith('.json') === false) {\n        res.status(400).json({ code: 400, message: 'ERROR: Invalid file extension' })\n        return\n      }\n    }\n\n    const filepath = mapPath || './extras/argumentMaps/defaults/codes.json'\n    const resolvedPath = path.resolve(filepath)\n\n    fs.readFile(resolvedPath, (error, data) => {\n      let response = {}\n      if (error) {\n        response = { code: 404, message: 'ERROR: File not found' }\n      } else {\n        try {\n          response.message = JSON.parse(data)\n          response.code = 200\n        } catch (error) {\n          response = { code: 500, message: 'ERROR: File contains invalid JSON' }\n        }\n      }\n      res.status(response.code).json(response.message)\n    })\n  })\n}\n"]}