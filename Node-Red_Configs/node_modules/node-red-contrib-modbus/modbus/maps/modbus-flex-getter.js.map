{"version":3,"sources":["modbus-flex-getter.js"],"names":["module","exports","RED","install","mbBasics","require","mbCore","nodes","registerType","config","internalDebugLog","createNode","this","name","showStatusActivities","showErrors","showWarnings","useIOFile","ioFile","getNode","useIOForPayload","logIOActivities","keepMsgProperties","verboseLogging","delayOnStart","settings","node","bufferMessageList","parseInt","Map","startDelayTime","modbusClient","delayOccured","inputDelayTimer","setNodeStatusTo","initModbusClientEvents","INPUT_TIMEOUT_MILLISECONDS","verbose","logMessage","mbIOCore","buildMessageWithIO","emit","errorProtocolMsg","err","msg","logMsgError","onModbusReadError","resp","data","sendEmptyMsgOnFail","setModbusError","parse","payload","message","quantity","prepareMsg","Number","isInteger","JSON","isValid","fc","unitid","address","error","isValidModbusMsg","messageId","getObjectId","topic","emptyMsgOnFail","verboseWarn","warn","buildNewMessageObject","isReadyForInput","resetInputDelayTimer","id","clearTimeout","value","initializeInputDelayTimer","client","isActive","isNotReadyForInput","invalidPayloadIn","isInactive","messageQueue","processNextMessage","setTimeout","inputMsg","on","deregisterForModbus","push","length","shift","origMsgInput","Object","assign","newMsg","set","buildNewMessage","onModbusReadDone","Error","done","clear","setNodeDefaultStatus"],"mappings":"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","file":"../modbus-flex-getter.js","sourcesContent":["/**\n Copyright (c) since the year 2016 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n\n/**\n * Modbus flexible Getter node.\n * @module NodeRedModbusFlexGetter\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const mbCore = require('./core/modbus-core')\n  const mbIOCore = require('./core/modbus-io-core')\n  const internalDebugLog = require('debug')('contribModbus:flex:getter')\n\n  function ModbusFlexGetter (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.showWarnings = config.showWarnings\n    this.connection = null\n\n    this.useIOFile = config.useIOFile\n    this.ioFile = RED.nodes.getNode(config.ioFile)\n    this.useIOForPayload = config.useIOForPayload\n    this.logIOActivities = config.logIOActivities\n\n    this.emptyMsgOnFail = config.emptyMsgOnFail\n    this.keepMsgProperties = config.keepMsgProperties\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    this.delayOnStart = config.delayOnStart\n    this.startDelayTime = parseInt(config.startDelayTime) || 10\n\n    const node = this\n    node.bufferMessageList = new Map()\n    node.INPUT_TIMEOUT_MILLISECONDS = 1000\n    node.delayOccured = false\n    node.inputDelayTimer = null\n\n    mbBasics.setNodeStatusTo('waiting', node)\n\n    const modbusClient = RED.nodes.getNode(config.server)\n\n    if (!modbusClient) {\n      return\n    }\n    modbusClient.registerForModbus(node)\n    mbBasics.initModbusClientEvents(node, modbusClient)\n\n    node.onModbusReadDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo('reading done', node)\n      }\n\n      node.send(mbIOCore.buildMessageWithIO(node, resp.data, resp, msg))\n      node.emit('modbusFlexGetterNodeDone')\n    }\n\n    node.errorProtocolMsg = function (err, msg) {\n      if (node.showErrors) {\n        mbBasics.logMsgError(node, err, msg)\n      }\n    }\n\n    node.onModbusReadError = function (err, msg) {\n      node.internalDebugLog(err.message)\n      const origMsg = mbCore.getOriginalMessage(node.bufferMessageList, msg)\n      node.errorProtocolMsg(err, origMsg)\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\n      mbBasics.setModbusError(node, modbusClient, err, origMsg)\n      node.emit('modbusFlexGetterNodeError')\n    }\n\n    node.prepareMsg = function (msg) {\n      if (typeof msg.payload === 'string') {\n        msg.payload = JSON.parse(msg.payload)\n      }\n\n      msg.payload.fc = parseInt(msg.payload.fc) || 3\n      msg.payload.unitid = parseInt(msg.payload.unitid)\n      msg.payload.address = parseInt(msg.payload.address) || 0\n      msg.payload.quantity = parseInt(msg.payload.quantity) || 1\n\n      return msg\n    }\n\n    node.isValidModbusMsg = function (msg) {\n      let isValid = true\n\n      if (!(Number.isInteger(msg.payload.fc) &&\n        msg.payload.fc >= 1 &&\n        msg.payload.fc <= 4)) {\n        node.error('FC Not Valid', msg)\n        isValid &= false\n      }\n\n      if (isValid &&\n        !(Number.isInteger(msg.payload.address) &&\n          msg.payload.address >= 0 &&\n          msg.payload.address <= 65535)) {\n        node.error('Address Not Valid', msg)\n        isValid &= false\n      }\n\n      if (isValid &&\n        !(Number.isInteger(msg.payload.quantity) &&\n          msg.payload.quantity >= 1 &&\n          msg.payload.quantity <= 65535)) {\n        node.error('Quantity Not Valid', msg)\n        isValid &= false\n      }\n\n      return isValid\n    }\n\n    node.buildNewMessageObject = function (node, msg) {\n      const messageId = mbCore.getObjectId()\n      return {\n        topic: msg.topic || node.id,\n        messageId,\n        payload: {\n          value: msg.payload.value || msg.value,\n          unitid: msg.payload.unitid,\n          fc: msg.payload.fc,\n          address: msg.payload.address,\n          quantity: msg.payload.quantity,\n          emptyMsgOnFail: node.emptyMsgOnFail,\n          keepMsgProperties: node.keepMsgProperties,\n          messageId\n        }\n      }\n    }\n    /* istanbul ignore next */\n    function verboseWarn (logMessage) {\n      if (RED.settings.verbose && node.showWarnings) {\n        node.warn('Flex-Getter -> ' + logMessage)\n      }\n    }\n\n    node.isReadyForInput = function () {\n      return (modbusClient.client && modbusClient.isActive() && node.delayOccured)\n    }\n\n    node.isNotReadyForInput = function () {\n      return !node.isReadyForInput()\n    }\n\n    node.resetInputDelayTimer = function () {\n      if (node.inputDelayTimer) {\n        /* istanbul ignore next */\n        verboseWarn('reset input delay timer node ' + node.id)\n        clearTimeout(node.inputDelayTimer)\n      }\n      node.inputDelayTimer = null\n      node.delayOccured = false\n    }\n\n    node.initializeInputDelayTimer = function () {\n      node.resetInputDelayTimer()\n      if (node.delayOnStart) {\n        /* istanbul ignore next */\n        verboseWarn('initialize input delay timer node ' + node.id)\n        node.inputDelayTimer = setTimeout(() => {\n          node.delayOccured = true\n        }, node.INPUT_TIMEOUT_MILLISECONDS * node.startDelayTime)\n      } else {\n        node.delayOccured = true\n      }\n    }\n\n    node.initializeInputDelayTimer()\n\n    // Add a queue to store incoming messages\n    const messageQueue = []\n\n    node.on('input', function (msg) {\n      if (mbBasics.invalidPayloadIn(msg)) {\n        /* istanbul ignore next */\n        verboseWarn('Invalid message on input.')\n        return\n      }\n      if (node.isNotReadyForInput()) {\n        /* istanbul ignore next */\n        verboseWarn('Inject while node is not ready for input.')\n        return\n      }\n      if (modbusClient.isInactive()) {\n        /* istanbul ignore next */\n        verboseWarn('You sent an input to inactive client. Please use initial delay on start or send data more slowly.')\n        return\n      }\n\n      messageQueue.push(msg)\n      processNextMessage()\n    })\n\n    function processNextMessage () {\n      if (messageQueue.length === 0) {\n        node.emit('modbusFlexGetterNodeDone')\n        return\n      }\n      const msg = messageQueue.shift()\n      const origMsgInput = Object.assign({}, msg)\n      try {\n        const inputMsg = node.prepareMsg(origMsgInput)\n        if (node.isValidModbusMsg(inputMsg)) {\n          const newMsg = node.buildNewMessageObject(node, inputMsg)\n          node.bufferMessageList.set(newMsg.messageId, mbBasics.buildNewMessage(node.keepMsgProperties, inputMsg, newMsg))\n          modbusClient.emit('readModbus', newMsg, node.onModbusReadDone, node.onModbusReadError)\n        } else {\n          node.errorProtocolMsg(new Error('Invalid Modbus message'), origMsgInput)\n          mbBasics.sendEmptyMsgOnFail(node, new Error('Invalid Modbus message'), origMsgInput)\n        }\n      } catch (err) {\n        node.errorProtocolMsg(err, origMsgInput)\n        mbBasics.sendEmptyMsgOnFail(node, err, origMsgInput)\n      }\n      processNextMessage()\n    }\n    node.on('close', function (done) {\n      node.resetInputDelayTimer()\n      mbBasics.setNodeStatusTo('closed', node)\n      node.bufferMessageList.clear()\n      modbusClient.deregisterForModbus(node.id, done)\n    })\n\n    if (!node.showStatusActivities) {\n      mbBasics.setNodeDefaultStatus(node)\n    }\n  }\n\n  RED.nodes.registerType('modbus-flex-getter', ModbusFlexGetter)\n}\n"]}