{"version":3,"sources":["modbus-queue-info.js"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","h","f","Error","s","done","method","arg","delegate","maybeInvokeDelegate","TypeError","y","tryCatch","type","resultName","next","nextLoc","sent","_sent","dispatchException","abrupt","p","l","call","GeneratorFunction","GeneratorFunctionPrototype","d","this","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","callInvokeWithMethodAndArg","invoke","_typeof","resolve","__await","then","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","module","exports","RED","require","install","mbBasics","coreModbusQueue","internalDebugLog","nodes","registerType","config","createNode","unitid","lowLowLevel","lowLevel","highLevel","highHighLevel","errorOnHighLevel","queueReadIntervalTime","showStatusActivities","updateOnAllQueueChanges","updateOnAllUnitQueues","ModbusQueueInfo","topic","node","parseInt","server","modbusClient","unit","unitsWithQueue","set","queueReadInterval","getNode","has","get","unitWithQueue","lowLowLevelReached","lowLevelReached","registerForModbus","initUnitQueueStates","err","msg","showErrors","logMsgError","highLevelReached","bufferCommandListLength","highHighLevelReached","errorProtocolMsg","state","checkLowLevelReached","checkHighLevelReached","modbusClientName","payload","Date","now","id","error","getStatusSituationFillColor","fillColor","setNodeStatusByActivity","shape","text","fill","concat","readFromQueue","_callee","_context","updateStatusRunning","bufferCommands","bufferCommandList","t0","checkQueueStates","checkHighHighLevelReached","readFromAllUnitQueues","reject","registerModbusQueueActionsToNode","eventCallback","on","setInterval","removeModbusQueueActionsFromNode","removeListener","queueEnabled","setNodeStatusTo","queues","msgUnitId","resetQueue","unitId","sendEmptyMsgOnFail","allQueueData","queue","queueOptions","date","lowlowLevel","warn","msgQueueReset","infoText","send","clearInterval","setNodeDefaultStatus"],"mappings":"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","file":"../modbus-queue-info.js","sourcesContent":["/**\n Copyright (c) since the year 2016 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n\n/**\n * Modbus Queue Info node.\n * @module NodeRedModbusQueueInfo\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const coreModbusQueue = require('./core/modbus-queue-core')\n  const internalDebugLog = require('debug')('contribModbus:queue')\n\n  function ModbusQueueInfo (config) {\n    RED.nodes.createNode(this, config)\n\n    const { name, topic, unitid, lowLowLevel, lowLevel, highLevel, highHighLevel, errorOnHighLevel, queueReadIntervalTime, showStatusActivities, updateOnAllQueueChanges, updateOnAllUnitQueues } = config\n    this.name = name\n    this.topic = topic\n    this.unitid = parseInt(unitid) || 1\n    this.lowLowLevel = parseInt(lowLowLevel)\n    this.lowLevel = parseInt(lowLevel)\n    this.highLevel = parseInt(highLevel)\n    this.highHighLevel = parseInt(highHighLevel)\n    this.errorOnHighLevel = errorOnHighLevel\n    this.queueReadIntervalTime = queueReadIntervalTime || 1000\n    this.showStatusActivities = showStatusActivities\n    this.updateOnAllQueueChanges = updateOnAllQueueChanges\n    this.updateOnAllUnitQueues = updateOnAllUnitQueues\n\n    this.internalDebugLog = internalDebugLog\n\n    const node = this\n    node.queueReadInterval = null\n    node.updateStatusRunning = false\n    node.unitsWithQueue = new Map()\n    mbBasics.setNodeStatusTo('waiting', node)\n\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n    modbusClient.registerForModbus(node)\n\n    node.initUnitQueueStates = function () {\n      for (let unit = 0; unit < 256; unit += 1) {\n        node.unitsWithQueue.set(unit, {})\n        node.resetStates(unit)\n      }\n    }\n\n    node.resetStates = function (unit) {\n      const unitWithQueue = node.unitsWithQueue.has(unit) ? node.unitsWithQueue.get(unit) : {}\n      unitWithQueue.lowLowLevelReached = true\n      unitWithQueue.lowLevelReached = false\n      unitWithQueue.highLevelReached = false\n      unitWithQueue.highHighLevelReached = false\n    }\n\n    node.errorProtocolMsg = function (err, msg) {\n      if (node.showErrors) {\n        mbBasics.logMsgError(node, err, msg)\n      }\n    }\n    node.initUnitQueueStates()\n\n    node.checkLowLevelReached = function (node, bufferCommandListLength, unit) {\n      const unitWithQueue = node.unitsWithQueue.get(unit)\n      if (!unitWithQueue.lowLevelReached && bufferCommandListLength > node.lowLowLevel && bufferCommandListLength < node.lowLevel) {\n        unitWithQueue.lowLevelReached = true\n        const msg = {\n          payload: Date.now(),\n          topic: node.topic,\n          state: 'low level reached',\n          unitid: unit,\n          modbusClientName: modbusClient.name,\n          bufferCommandListLength\n        }\n        node.send(msg)\n      }\n    }\n\n    node.checkHighLevelReached = function (node, bufferCommandListLength, unit) {\n      const unitWithQueue = node.unitsWithQueue.get(unit)\n      if (!unitWithQueue.highLevelReached &&\n        bufferCommandListLength > node.lowLevel &&\n        bufferCommandListLength > node.highLevel) {\n        unitWithQueue.highLevelReached = true\n        const msg = {\n          payload: Date.now(),\n          topic: node.topic,\n          state: 'high level reached',\n          unitid: unit,\n          modbusClientName: modbusClient.name || modbusClient.id,\n          highLevel: node.highLevel,\n          bufferCommandListLength\n        }\n\n        if (node.errorOnHighLevel) {\n          node.error(new Error('Queue High Level Reached'), msg)\n        } else {\n          node.warn(msg)\n        }\n\n        node.send(msg)\n      }\n    }\n\n    node.checkHighHighLevelReached = function (node, bufferCommandListLength, unit) {\n      const unitWithQueue = node.unitsWithQueue.get(unit)\n      if (!unitWithQueue.highHighLevelReached &&\n        bufferCommandListLength > node.highLevel &&\n        bufferCommandListLength > node.highHighLevel) {\n        unitWithQueue.highHighLevelReached = true\n        const msg = {\n          payload: Date.now(),\n          topic: node.topic,\n          state: 'high high level reached',\n          unitid: unit,\n          modbusClientName: modbusClient.name || modbusClient.id,\n          highLevel: node.highLevel,\n          highHighLevel: node.highHighLevel,\n          bufferCommandListLength\n        }\n        node.error(new Error('Queue High High Level Reached'), msg)\n        node.send(msg)\n      }\n    }\n\n    node.getStatusSituationFillColor = function (unit) {\n      const unitWithQueue = node.unitsWithQueue.get(unit)\n      let fillColor = 'blue'\n\n      switch (true) {\n        case unitWithQueue.lowLevelReached:\n          fillColor = 'green'\n          break\n        case unitWithQueue.highLevelReached:\n          if (node.errorOnHighLevel) {\n            fillColor = 'red'\n          } else {\n            fillColor = 'yellow'\n          }\n          break\n        case unitWithQueue.highHighLevelReached:\n          fillColor = 'red'\n          break\n      }\n\n      return fillColor\n    }\n\n    node.setNodeStatusByActivity = function (bufferCommandListLength, unit) {\n      if (node.showStatusActivities) {\n        node.status({\n          fill: node.getStatusSituationFillColor(node.unitid),\n          shape: 'ring',\n          text: (bufferCommandListLength) ? `active unit ${unit} queue items: ${bufferCommandListLength}` : `active (Unit-Id: ${unit}) empty`\n        })\n      }\n    }\n\n    node.readFromQueue = async function () {\n      if (node.updateStatusRunning) {\n        return\n      }\n      const unit = ((node.unitid < 1 || node.unitid > 255)) ? 1 : node.unitid\n      if (modbusClient.bufferCommands) {\n        try {\n          node.updateStatusRunning = true\n          const bufferCommandListLength = modbusClient.bufferCommandList.get(unit).length\n          node.checkQueueStates(bufferCommandListLength, unit)\n          node.setNodeStatusByActivity(bufferCommandListLength, unit)\n          node.updateStatusRunning = false\n        } catch (err) {\n          node.updateStatusRunning = false\n          throw err\n        }\n      } else {\n        if (node.showStatusActivities) {\n          node.setNodeStatusByActivity(null, unit)\n        }\n      }\n    }\n\n    node.checkQueueStates = function (bufferCommandListLength, unit) {\n      const unitWithQueue = node.unitsWithQueue.get(unit)\n      if (!unitWithQueue.lowLowLevelReached && bufferCommandListLength < node.lowLowLevel) {\n        node.resetStates(unit)\n      }\n      node.checkLowLevelReached(node, bufferCommandListLength, unit)\n      node.checkHighLevelReached(node, bufferCommandListLength, unit)\n      node.checkHighHighLevelReached(node, bufferCommandListLength, unit)\n    }\n\n    node.readFromAllUnitQueues = function () {\n      if (node.updateStatusRunning) {\n        return\n      }\n\n      if (modbusClient.bufferCommands) {\n        return new Promise(\n          function (resolve, reject) {\n            try {\n              node.updateStatusRunning = true\n              let bufferCommandListLength = 0\n              for (let unit = 0; unit < 256; unit += 1) {\n                bufferCommandListLength = modbusClient.bufferCommandList.get(unit).length\n                if (!bufferCommandListLength) {\n                  continue\n                }\n                node.checkQueueStates(bufferCommandListLength, unit)\n              }\n              node.updateStatusRunning = false\n              resolve()\n            } catch (err) {\n              node.updateStatusRunning = false\n              reject(err)\n            }\n          })\n      }\n    }\n\n    node.registerModbusQueueActionsToNode = function (eventCallback) {\n      if (node.updateOnAllQueueChanges) { // much more CPU-Load on many parallel requests to the client\n        modbusClient.on('mbqueue', eventCallback) // en-queue\n      }\n      modbusClient.on('mbactive', eventCallback) // de-queue\n      modbusClient.on('mbinit', eventCallback)\n      modbusClient.on('mbconnected', eventCallback)\n      modbusClient.on('mberror', eventCallback)\n      modbusClient.on('mbclosed', eventCallback)\n      node.queueReadInterval = setInterval(eventCallback, node.queueReadIntervalTime)\n    }\n\n    node.removeModbusQueueActionsFromNode = function (eventCallback) {\n      modbusClient.removeListener('mbqueue', eventCallback)\n      modbusClient.removeListener('mbactive', eventCallback)\n      modbusClient.removeListener('mbinit', eventCallback)\n      modbusClient.removeListener('mbconnected', eventCallback)\n      modbusClient.removeListener('mberror', eventCallback)\n      modbusClient.removeListener('mbclosed', eventCallback)\n    }\n\n    if (node.updateOnAllUnitQueues) {\n      node.registerModbusQueueActionsToNode(node.readFromAllUnitQueues)\n      mbBasics.setNodeStatusTo('active for all queues', node)\n    } else {\n      node.registerModbusQueueActionsToNode(node.readFromQueue)\n    }\n\n    node.on('input', function (msg) {\n      let msgUnitId = node.unitid\n      msg.payload.queueEnabled = modbusClient.bufferCommands\n\n      if (node.updateOnAllUnitQueues) {\n        msg.payload.allQueueData = true\n        msg.payload.queues = modbusClient.bufferCommandList\n      } else {\n        try {\n          if (msg.payload.resetQueue) {\n            msgUnitId = parseInt(msg.payload.unitId) || node.unitid\n          } else {\n            msgUnitId = parseInt(msg.payload) || node.unitid\n          }\n        } catch (err) {\n          node.errorProtocolMsg(err, msg)\n          mbBasics.sendEmptyMsgOnFail(node, err, msg)\n          msgUnitId = node.unitid\n        }\n        msg.payload.allQueueData = false\n        msg.payload.unitid = msgUnitId\n        msg.payload.queue = modbusClient.bufferCommandList.get(msgUnitId)\n      }\n\n      msg.payload.queueOptions = {\n        date: Date.now(),\n        state: 'queue request',\n        modbusClientName: modbusClient.name || modbusClient.id,\n        lowlowLevel: node.lowlowLevel,\n        unitId: msgUnitId,\n        lowLevel: node.lowLevel,\n        highLevel: node.highLevel,\n        highHighLevel: node.highHighLevel\n      }\n\n      const msgQueueReset = msg.payload.resetQueue || msg.resetQueue\n      if (msgQueueReset && modbusClient.bufferCommands) {\n        coreModbusQueue.initQueue(modbusClient)\n        if (RED.settings.verbose) {\n          const infoText = 'Init Queue By External Node'\n          modbusClient.warn(infoText)\n          internalDebugLog(infoText)\n        }\n        node.initUnitQueueStates()\n\n        if (node.showStatusActivities) {\n          node.status({\n            fill: 'blue',\n            shape: 'ring',\n            text: 'active empty unit queue'\n          })\n        }\n        msg.payload.queueOptions.state = 'queue reset done'\n      }\n\n      node.send(msg)\n    })\n\n    node.on('close', function (done) {\n      if (node.updateOnAllUnitQueues) {\n        node.removeModbusQueueActionsFromNode(node.readFromAllUnitQueues)\n      } else {\n        node.removeModbusQueueActionsFromNode(node.readFromQueue)\n      }\n      mbBasics.setNodeStatusTo('closed', node)\n      if (node.queueReadInterval) {\n        clearInterval(node.queueReadInterval)\n      }\n      node.queueReadInterval = null\n      modbusClient.deregisterForModbus(node.id, done)\n    })\n\n    if (!node.showStatusActivities) {\n      mbBasics.setNodeDefaultStatus(node)\n    }\n  }\n\n  RED.nodes.registerType('modbus-queue-info', ModbusQueueInfo)\n}\n"]}