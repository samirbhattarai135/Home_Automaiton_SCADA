{"version":3,"sources":["modbus-flex-connector.js"],"names":["module","exports","RED","install","mbBasics","require","internalDebugLog","nodes","registerType","config","createNode","this","name","maxReconnectsPerMinute","emptyQueue","showStatusActivities","showErrors","verboseLogging","settings","verbose","server","getNode","emptyMsgOnFail","configMsgOnChange","setNodeStatusTo","node","registerForModbus","setNodeDefaultStatus","onConfigDone","msg","payload","actualServiceState","config_change","onConfigError","err","message","error","invalidPayloadIn","statusText","on","connectorType","concat","JSON","stringify","emit","Error","send"],"mappings":"AAYAA,OAAAC,QAAA,SAAAC,GAEAF,QAAOC,oBAAuB,EAAEE,QAAA,EAC9B,IAAAC,EAAYC,QAAA,iBAAA,EAGNC,EAAmBD,QAAQ,OAAO,EAAE,8BAA8B,EA0GxEH,EAAIK,MAAMC,aAAa,wBA3GvB,SAAyBC,GACzBP,EAAMI,MAAAA,WAAmBD,KAAAA,CAAQ,EAG/BH,KAAIK,KAAMG,EAAAA,KAEVC,KAAKC,uBAAkBH,EAAAI,wBAAA,EACvBF,KAAKE,WAAAA,EAAAA,WACLF,KAAKG,qBAAoBA,EAAUC,qBACnCJ,KAAKI,WAAAA,EAAoBC,WACzBL,KAAKK,WAAaP,KAGlBE,KAAKL,iBAAmBA,EACxBK,KAAKM,eAAiBf,EAAIgB,SAASC,QACnCR,KAAKS,OAASlB,EAAIK,MAAMc,QAAQZ,EAAOW,MAAM,EAC7CT,KAAKW,eAAiBb,EAAOa,eAC7BX,KAAKY,kBAAoBd,EAAOc,kBAIhCnB,IAAAA,EAASoB,KAATpB,EAGEA,gBAASoB,UAAgBC,CAAA,EAE3BA,EAAAL,QAEAhB,EAMMqB,gBAAKV,aAAsBU,CAAA,EAJjCA,EAMGL,OAAMM,kBAAAD,CAAA,EALTrB,EAMIA,uBAASuB,EAAyBhB,KAACS,MAAA,EAJvCK,EAOEG,aAASL,SAAmBM,GAC1BA,EAAIC,qBACJD,EAAIC,gBAAiBL,EAASL,OAAAW,mBAAAN,CAAA,EAE9BI,EAAIG,qBAAyBP,CAAA,EAIhCA,EAAAF,mBAEGM,EAACI,QAAaJ,EAAGC,SAAUI,GAC7B5B,EAAAA,QAAAA,OAAqB6B,WAGnBN,EAAIJ,cAAKV,UAPXU,EAUIrB,KAAAA,CAASuB,CATf,EAEAF,EAAKQ,cAWgB,SAAAC,EAAAL,GAVnBvB,EAWS4B,EAAAC,OAAA,EAEPV,EAAAT,aAEIoB,EAAKrB,qBAETU,EAAWI,gBAAe,QAAAJ,CAAA,EAGxBI,EAAIC,qBAAYL,CAAA,EAIpBS,GAAAA,EAAAC,QACDN,EAAAO,MAAAF,EAGK9B,EAAAA,MAASiC,IAAAA,MAAAA,CAAgB,EAI7BR,EAAIJ,MAAKV,WAAAA,EAAoBuB,WAE7Bb,EAAAW,MAAAP,EAAAO,MAAAP,CAAA,EAGEvB,EAAAA,iBAEAuB,EAAIC,QAAQhB,IAGZW,EAAMW,KAAKP,CAAG,EAjBlB,EAsBAJ,EAAEc,GAAA,QAAA,SAAAV,GAEF,IAPUO,EAONX,EAAKV,iBAAsBc,CAAA,IAI/BJ,EAAAV,sBACFX,EAAAoB,gBAAAC,EAAAL,OAAAW,mBAAAN,CAAA,EAlBQI,EAAIC,QAAQU,eACdlC,EAAgB,qBAAAmC,OAAsBC,KAAKC,UAAUd,EAAIC,OAAO,CAAC,CAAE,EAEnED,EAAIC,QAAQhB,WAAaW,EAAKX,WAC9BW,EAAKL,OAAOwB,KAAK,mBAAoBf,EAAKJ,EAAKG,aAAcH,EAAKQ,aAAa,IAEzEG,EAAQ,IAAIS,MAAM,oCAAoC,EAC5DpB,EAAKW,MAAMA,EAAOP,CAAG,EAErBJ,EAAKqB,KAAKjB,CAAG,GAEjB,CAAC,EAEGJ,EAAKV,qBACPX,EAASoB,gBAAgB,SAAUC,CAAI,EAEvCrB,EAASuB,qBAAqBF,CAAI,GA3EpCrB,EAASoB,gBAAgB,eAAkBC,CAAC,CA6E9C,CAEmE,CACrE","file":"../modbus-flex-connector.js","sourcesContent":["/**\n Copyright (c) since the year 2017 Klaus Landsdorf (http://plus4nodered.com/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n\n/**\n * Flex Connector Node.\n * @module NodeRedModbusFlexConnector\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const internalDebugLog = require('debug')('contribModbus:flex:connector')\n\n  function ModbusFlexConnector (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.maxReconnectsPerMinute = config.maxReconnectsPerMinute || 4\n    this.emptyQueue = config.emptyQueue\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.connection = null\n\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n    this.server = RED.nodes.getNode(config.server)\n    this.emptyMsgOnFail = config.emptyMsgOnFail\n    this.configMsgOnChange = config.configMsgOnChange\n\n    const node = this\n\n    mbBasics.setNodeStatusTo('waiting', node)\n\n    if (!node.server) {\n      mbBasics.setNodeStatusTo('disconnected', node)\n      return\n    }\n\n    mbBasics.setNodeStatusTo('connecting', node)\n\n    node.server.registerForModbus(node)\n    mbBasics.initModbusClientEvents(node, this.server)\n\n    node.onConfigDone = function (msg) {\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo(node.server.actualServiceState, node)\n      } else {\n        mbBasics.setNodeDefaultStatus(node)\n      }\n\n      if (node.configMsgOnChange) {\n        msg.payload = msg.payload || {}\n        msg.payload.status = 'changed'\n      } else {\n        msg.config_change = 'emitted'\n      }\n\n      node.send(msg)\n    }\n\n    node.onConfigError = function (err, msg) {\n      internalDebugLog(err.message)\n\n      if (node.showErrors) {\n        if (node.showStatusActivities) {\n          mbBasics.setNodeStatusTo('error', node)\n        } else {\n          mbBasics.setNodeDefaultStatus(node)\n        }\n\n        if (err && err.message) {\n          msg.error = err\n        } else {\n          msg.error = new Error(err)\n        }\n\n        msg.error.nodeStatus = node.statusText\n\n        node.error(msg.error, msg)\n\n        if (node.emptyMsgOnFail) {\n          msg.payload = ''\n        }\n\n        node.send(msg)\n      }\n    }\n\n    node.on('input', function (msg) {\n      if (mbBasics.invalidPayloadIn(msg)) {\n        return\n      }\n\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo(node.server.actualServiceState, node)\n      }\n\n      if (msg.payload.connectorType) {\n        internalDebugLog(`dynamicReconnect: ${JSON.stringify(msg.payload)}`)\n\n        msg.payload.emptyQueue = node.emptyQueue\n        node.server.emit('dynamicReconnect', msg, node.onConfigDone, node.onConfigError)\n      } else {\n        const error = new Error('Payload Not Valid - Connector Type')\n        node.error(error, msg)\n\n        node.send(msg)\n      }\n    })\n\n    if (node.showStatusActivities) {\n      mbBasics.setNodeStatusTo('active', node)\n    } else {\n      mbBasics.setNodeDefaultStatus(node)\n    }\n  }\n\n  RED.nodes.registerType('modbus-flex-connector', ModbusFlexConnector)\n}\n"]}